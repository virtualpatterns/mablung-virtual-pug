{"version":3,"sources":["../../source/library/utility.js"],"names":["ConvertToVirtualNode","VirtualNode","VirtualText","Utility","convertToNode","parameter","addAndAttribute","object","attributeNode","Object","entries","forEach","name","value","addAttribute","getAttributeName","getAttributeValue","undefined","currentValue","Array","isArray","join","toUpperCase","keys","filter","key","map","fn","length","entry","createNode","property","childNode","getNodeName","getNodeProperty","getChildNode","sort","leftName","rightName","localeCompare","node"],"mappings":"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","sourcesContent":["import _ConvertToVirtualNode from 'html-to-vdom'\nimport CreateVirtualNode from 'virtual-dom/h.js'\nimport VirtualNode from 'virtual-dom/vnode/vnode.js'\nimport VirtualText from 'virtual-dom/vnode/vtext.js'\n\nconst ConvertToVirtualNode = _ConvertToVirtualNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n\nclass Utility {\n\n  /* c8 ignore next 3 */\n  static convertToNode(...parameter) {\n    return ConvertToVirtualNode(...parameter)\n  }\n\n  // AndAttributeNode\n  /* c8 ignore next 3 */\n  static addAndAttribute(object, attributeNode) {\n    Object.entries(object).forEach(([ name, value ]) => this.addAttribute(name, value, attributeNode))\n  }\n\n  // AttributeNode\n  /* c8 ignore next 15 */\n  static addAttribute(name, value, attributeNode) {\n\n    if (typeof value === 'boolean' &&\n        value === false) {\n      // do nothing\n    } else {\n\n      name = this.getAttributeName(name)\n      value = this.getAttributeValue(name, value, attributeNode[name])\n\n      if (value !== undefined) {\n        attributeNode[name] = value\n      }\n\n    }\n\n  }\n\n  /* c8 ignore next 9 */\n  static getAttributeName(name) {\n    return name\n  }\n\n  /* c8 ignore next 28 */\n  static getAttributeValue(name, value, currentValue) {\n\n    if (typeof value === 'boolean') {\n      value = value ? name : false\n    } else if (typeof value === 'string') {\n      value = currentValue ? `${currentValue} ${value}` : value\n    } else if (Array.isArray(value)) {\n      value = currentValue ? `${currentValue} ${value.join(' ')}` : value.join(' ')\n    } else {\n\n      switch (name.toUpperCase()) {\n        case 'CLASS':\n          value = Object.keys(value)\n            .filter((key) => value[key])\n            .join(' ')\n          break\n        case 'STYLE':\n          value = Object.keys(value)\n            .map((key) => `${key}:${value[key]};`)\n            .join('')\n          break\n      }\n\n    }\n\n    return value === '' ? undefined : value\n\n  }\n\n  // EachNode\n  /* c8 ignore next 17 */\n  static forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n  // TagNode\n  /* c8 ignore next 9 */\n  static createNode(name, property, childNode) {\n\n    name = this.getNodeName(name)\n    property = this.getNodeProperty(property)\n    childNode = this.getChildNode(childNode)\n\n    return CreateVirtualNode(name, { 'attributes': property }, childNode)\n\n  }\n\n  /* c8 ignore next 3 */\n  static getNodeName(name) {\n    return name\n  }\n\n  /* c8 ignore next 17 */\n  static getNodeProperty(property) {\n\n    let map = {} // { 'CLASS': 'className', 'FOR': 'htmlFor', 'HTTP-EQUIV': 'httpEquiv' }\n    let entry = Object.entries(property)\n\n    entry\n      .sort(([ leftName ], [ rightName ]) => leftName.localeCompare(rightName))\n      .forEach(([ name, value ]) => {\n\n        if (name.toUpperCase() in map) {\n          delete property[name]\n          property[map[name.toUpperCase()] || name] = value\n        }\n\n      })\n\n    return property\n\n  }\n\n  /* c8 ignore next 3 */\n  static getChildNode(node) {\n    return node\n  }\n\n}\n\nexport default Utility"],"file":"utility.cjs"}