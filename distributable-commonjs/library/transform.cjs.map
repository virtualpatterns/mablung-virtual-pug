{"version":3,"sources":["../../source/library/transform.js"],"names":["Lint","ESLint","Format","_Format","Babel","DefaultBabel","ModuleBabel","FilePath","__filename","Require","require","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","Lex","Parse","AST","getSourceFromContent","blockNode","BlockNode","blockSource","getSource","source","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","Package","name","version","Path","relative","getASTFromPath","FileSystem","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","includePattern","excludePattern","item","readdir","createModule","concat","filter","folder","isFile","file","reduce","isMatch","pattern","Promise","all","isCreated","pathExists","targetInformation","mtime","toUpperCase","ensureDir","writeFile","sourceIn","environment","configuration","JSON5","parse","resolve","env","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","Is","not","null","exec","UnrecognizedMessageTransformError","accumulator","undefined","Object","keys"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;AAEA,MAAM;AAAE,YAAUA;AAAZ,IAAqBC,eAA3B;AACA,MAAM;AAAE,YAAUC;AAAZ,IAAuBC,iBAA7B;AACA,MAAMC,KAAK,GAAGC,uBAAgBC,WAA9B;AACA,MAAMC,QAAQ,GArBdC,UAqBA;AACA,MAAMC,OAAO,GAtBbC,OAsBA;;AAEA,MAAMC,SAAN,CAAgB;AAEd,SAAOC,iBAAP,CAAyBC,OAAzB,EAAkCC,MAAM,GAAG;AAAE,YAAQ;AAAV,GAA3C,EAAsE;AACpE;AAEA,QAAIC,WAAW,GAAG,uBAAIF,OAAJ,EAAa;AAAE,kBAAYC,MAAM,CAACE;AAArB,KAAb,CAAlB;AACA,QAAIC,YAAY,GAAG,wBAAMF,WAAN,EAAmB;AAAE,kBAAYD,MAAM,CAACE;AAArB,KAAnB,CAAnB;AACA,QAAIE,YAAY,GAAG,sBAAKD,YAAL,EAAmB;AAAE,aAAOE,iBAAT;AAAc,eAASC;AAAvB,KAAnB,CAAnB;AACA,QAAIC,GAAG,GAAG,wBAAKH,YAAL,CAAV;AAEA,WAAOG,GAAP;AAED;;AAED,eAAaC,oBAAb,CAAkCT,OAAlC,EAA2CC,MAAM,GAAG;AAAE,YAAQ;AAAV,GAApD,EAA+E;AAC7E;AAEA,QAAIO,GAAG,GAAG,KAAKT,iBAAL,CAAuBC,OAAvB,EAAgCC,MAAhC,CAAV;AACA,QAAIS,SAAS,GAAG,IAAIC,kBAAJ,CAAcH,GAAd,EAAmBP,MAAnB,CAAhB;AACA,QAAIW,WAAW,GAAG,MAAMF,SAAS,CAACG,SAAV,EAAxB;AAEA,QAAIC,MAAM,GAAI;AAClB;AACA,wBAAwBF,WAAY;AACpC;AACA,sBAJI;AAMA,QAAIG,KAAK,GAAG,MAAM,KAAKC,mBAAL,CAAyBF,MAAzB,CAAlB,CAb6E,CAe7E;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;AAEA,WAAO;AAAEA,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAP;AAED;;AAED,eAAaE,4BAAb,CAA0CjB,OAA1C,EAAmDC,MAAM,GAAG;AAAE,YAAQ;AAAV,GAA5D,EAAuF;AACrF;AAEA,QAAI;AAAEa,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAoB,MAAM,KAAKN,oBAAL,CAA0BT,OAA1B,EAAmCC,MAAnC,CAA9B;AAEAc,IAAAA,KAAK,GAAGA,KAAK,CACVG,GADK,CACAH,KAAD,IAAY,WAAUA,KAAM,cAD3B,EAELI,IAFK,CAEA,IAFA,CAAR;AAIAL,IAAAA,MAAM,GAAK;AACf,oBAAoBC,KAAM;AAC1B,oBAAoBD,MAAO;AAC3B;AACA,kBAJI;AAMA,WAAOA,MAAP;AAED;;AAED,eAAaM,sBAAb,CAAoCpB,OAApC,EAA6CC,MAAM,GAAG;AAAE,YAAQ;AAAV,GAAtD,EAAiF;AAC/E;AAEA,QAAIa,MAAM,GAAG,IAAb;AACAA,IAAAA,MAAM,GAAG,MAAM,KAAKG,4BAAL,CAAkCjB,OAAlC,EAA2CC,MAA3C,CAAf;AACAa,IAAAA,MAAM,GAAG,MAAM,KAAKO,YAAL,CAAkBP,MAAlB,CAAf;AAEA,QAAIQ,EAAE,GAAG,IAAT;AACAC,IAAAA,IAAI,CAAE,QAAOT,MAAO,EAAhB,CAAJ;AAEA,WAAOQ,EAAP;AAED;;AAED,eAAaE,0BAAb,CAAwCxB,OAAxC,EAAiDC,MAAM,GAAG;AAAE,YAAQ;AAAV,GAA1D,EAAqF;AACnF;AAEA,QAAIa,MAAM,GAAG,IAAb;AACAA,IAAAA,MAAM,GAAG,MAAM,KAAKG,4BAAL,CAAkCjB,OAAlC,EAA2CC,MAA3C,CAAf;AACAa,IAAAA,MAAM,GAAK,kBAAiBW,iBAAQC,IAAK,KAAID,iBAAQE,OAAQ;AACjE,iCAAiCC,cAAKC,QAAL,CAAc,EAAd,EAAkBnC,QAAlB,CAA4B;AAC7D,6BAA6BO,MAAM,CAACE,IAAP,KAAgB,aAAhB,GAAgC,aAAhC,GAAgDyB,cAAKC,QAAL,CAAc,EAAd,EAAkB5B,MAAM,CAACE,IAAzB,CAA+B;AAC5G;AACA,kBAAkBW,MAAO;AACzB;AACA;AACA,kBAPI;AASA,WAAOA,MAAP;AAED;;AAED,eAAagB,cAAb,CAA4B3B,IAA5B,EAAkC;AAChC;AAEA,QAAIH,OAAO,GAAG,MAAM+B,iBAAWC,QAAX,CAAoB7B,IAApB,EAA0B;AAAE,kBAAY;AAAd,KAA1B,CAApB;AACA,QAAIK,GAAG,GAAG,KAAKT,iBAAL,CAAuBC,OAAvB,EAAgC;AAAE,cAAQG;AAAV,KAAhC,CAAV;AAEA,WAAOK,GAAP;AAED;;AAED,eAAayB,iBAAb,CAA+B9B,IAA/B,EAAqC;AACnC;AAEA,QAAIH,OAAO,GAAG,MAAM+B,iBAAWC,QAAX,CAAoB7B,IAApB,EAA0B;AAAE,kBAAY;AAAd,KAA1B,CAApB;AACA,QAAIW,MAAM,GAAG,MAAM,KAAKL,oBAAL,CAA0BT,OAA1B,EAAmC;AAAE,cAAQG;AAAV,KAAnC,CAAnB;AAEA,WAAOW,MAAP;AAED;;AAED,eAAaoB,yBAAb,CAAuC/B,IAAvC,EAA6C;AAC3C;AAEA,QAAIH,OAAO,GAAG,MAAM+B,iBAAWC,QAAX,CAAoB7B,IAApB,EAA0B;AAAE,kBAAY;AAAd,KAA1B,CAApB;AACA,QAAIW,MAAM,GAAG,MAAM,KAAKG,4BAAL,CAAkCjB,OAAlC,EAA2C;AAAE,cAAQG;AAAV,KAA3C,CAAnB;AAEA,WAAOW,MAAP;AAED;;AAED,eAAaqB,mBAAb,CAAiChC,IAAjC,EAAuC;AACrC;AAEA,QAAIH,OAAO,GAAG,MAAM+B,iBAAWC,QAAX,CAAoB7B,IAApB,EAA0B;AAAE,kBAAY;AAAd,KAA1B,CAApB;AACA,QAAImB,EAAE,GAAG,MAAM,KAAKF,sBAAL,CAA4BpB,OAA5B,EAAqC;AAAE,cAAQG;AAAV,KAArC,CAAf;AAEA,WAAOmB,EAAP;AAED;;AAED,eAAac,uBAAb,CAAqCjC,IAArC,EAA2C;AACzC;AAEA,QAAIH,OAAO,GAAG,MAAM+B,iBAAWC,QAAX,CAAoB7B,IAApB,EAA0B;AAAE,kBAAY;AAAd,KAA1B,CAApB;AACA,QAAIW,MAAM,GAAG,MAAM,KAAKU,0BAAL,CAAgCxB,OAAhC,EAAyC;AAAE,cAAQG;AAAV,KAAzC,CAAnB;AAEA,WAAOW,MAAP;AAED;;AAED,eAAauB,oBAAb,CAAkCC,UAAlC,EAA8CC,UAAU,GAAGR,iBAAWS,QAAX,CAAoBF,UAApB,EAAgCG,WAAhC,KAAgDH,UAAhD,GAA8D,GAAEV,cAAKc,OAAL,CAAaJ,UAAb,CAAyB,IAAGV,cAAKe,QAAL,CAAcL,UAAd,EAA0BV,cAAKgB,OAAL,CAAaN,UAAb,CAA1B,CAAoD,GAAEV,cAAKgB,OAAL,CAAalD,QAAb,CAAuB,EAApO,EAAuOO,MAAM,GAAG;AAAE,gBAAY,OAAd;AAAuB,YAAQ;AAA/B,GAAhP,EAAuR;AACrR;AAEA,QAAI4C,iBAAiB,GAAG,MAAMd,iBAAWe,IAAX,CAAgBR,UAAhB,CAA9B;;AAEA,QAAIO,iBAAiB,CAACJ,WAAlB,EAAJ,EAAqC;AAEnC,UAAIM,cAAc,GAAG,CAAE,OAAF,CAArB;AACA,UAAIC,cAAc,GAAG,CAAE,YAAF,CAArB;AAEA,UAAIC,IAAI,GAAG,MAAMlB,iBAAWmB,OAAX,CAAmBZ,UAAnB,EAA+B;AAAE,oBAAY,OAAd;AAAuB,yBAAiB;AAAxC,OAA/B,CAAjB;AAEA,UAAIa,YAAY,GAAG,EAAnB;AAEAA,MAAAA,YAAY,GAAGA,YAAY,CAACC,MAAb,CAAoBH,IAAI,CACpCI,MADgC,CACxBJ,IAAD,IAAUA,IAAI,CAACR,WAAL,EADe,EAEhCvB,GAFgC,CAE3BoC,MAAD,IAAY,KAAKjB,oBAAL,CAA2B,GAAEC,UAAW,IAAGgB,MAAM,CAAC5B,IAAK,EAAvD,EAA2D,GAAEa,UAAW,IAAGe,MAAM,CAAC5B,IAAK,EAAvF,EAA0FzB,MAA1F,CAFgB,CAApB,CAAf;AAIAkD,MAAAA,YAAY,GAAGA,YAAY,CAACC,MAAb,CAAoBH,IAAI,CACpCI,MADgC,CACxBJ,IAAD,IAAUA,IAAI,CAACM,MAAL,EADe,EAEhCF,MAFgC,CAExBG,IAAD,IAAUT,cAAc,CAACU,MAAf,CAAsB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,GAAGA,OAAH,GAAa,wBAAMF,IAAI,CAAC9B,IAAX,EAAiBiC,OAAjB,CAAhE,EAA2F,KAA3F,CAFe,EAGhCN,MAHgC,CAGxBG,IAAD,IAAU,CAACR,cAAc,CAACS,MAAf,CAAsB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,GAAGA,OAAH,GAAa,wBAAMF,IAAI,CAAC9B,IAAX,EAAiBiC,OAAjB,CAAhE,EAA2F,KAA3F,CAHc,EAIhCzC,GAJgC,CAI3BsC,IAAD,IAAU,KAAKnB,oBAAL,CAA2B,GAAEC,UAAW,IAAGkB,IAAI,CAAC9B,IAAK,EAArD,EAAyD,GAAEa,UAAW,IAAGX,cAAKe,QAAL,CAAca,IAAI,CAAC9B,IAAnB,EAAyBE,cAAKgB,OAAL,CAAaY,IAAI,CAAC9B,IAAlB,CAAzB,CAAkD,GAAEE,cAAKgB,OAAL,CAAalD,QAAb,CAAuB,EAApJ,CAJkB,EAIsIO,MAJtI,CAApB,CAAf;AAMA,aAAO2D,OAAO,CAACC,GAAR,CAAYV,YAAZ,CAAP;AAED,KArBD,MAqBO;AAEL,UAAIW,SAAS,GAAG,KAAhB;;AAEA,UAAI,MAAM/B,iBAAWgC,UAAX,CAAsBxB,UAAtB,CAAV,EAA6C;AAE3C,YAAIyB,iBAAiB,GAAG,MAAMjC,iBAAWe,IAAX,CAAgBP,UAAhB,CAA9B;;AAEA,YAAIM,iBAAiB,CAACoB,KAAlB,GAA0BD,iBAAiB,CAACC,KAAhD,EAAuD;AACrDH,UAAAA,SAAS,GAAG,IAAZ;AACD;AAEF,OARD,MAQO;AACLA,QAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAIA,SAAJ,EAAe;AAEb,YAAIhD,MAAM,GAAG,IAAb;AACAA,QAAAA,MAAM,GAAG,MAAM,KAAKsB,uBAAL,CAA6BE,UAA7B,CAAf;AACAxB,QAAAA,MAAM,GAAG,MAAM,KAAKO,YAAL,CAAkBP,MAAlB,EAA0Bc,cAAKgB,OAAL,CAAaL,UAAb,EAAyB2B,WAAzB,OAA2C,MAA3C,GAAoD,UAApD,GAAiE,UAA3F,CAAf;AAEA,cAAMnC,iBAAWoC,SAAX,CAAqBvC,cAAKc,OAAL,CAAaH,UAAb,CAArB,CAAN,CANa,CAOb;;AACA,eAAOR,iBAAWqC,SAAX,CAAqB7B,UAArB,EAAiCzB,MAAjC,EAAyCb,MAAzC,CAAP;AAED;AAEF;AAEF;;AAED,eAAaoB,YAAb,CAA0BgD,QAA1B,EAAoCC,WAAW,GAAG1C,cAAKgB,OAAL,CAAalD,QAAb,EAAuBwE,WAAvB,OAAyC,MAAzC,GAAkD,UAAlD,GAA+D,UAAjH,EAA6H;AAE3H,QAAIK,aAAa,GAAG,IAApB;AACAA,IAAAA,aAAa,GAAGC,cAAMC,KAAN,CAAY,MAAM1C,iBAAWC,QAAX,CAAoBpC,OAAO,CAAC8E,OAAR,CAAgB,0BAAhB,CAApB,CAAlB,EAAoF;AAAE,kBAAY;AAAd,KAApF,CAAhB;AACAH,IAAAA,aAAa,GAAGA,aAAa,CAACI,GAAd,CAAkBL,WAAlB,CAAhB;AAEA,QAAI;AAAE,cAAQM;AAAV,QAAwB,MAAMrF,KAAK,CAACsF,cAAN,CAAqBR,QAArB,EAA+BE,aAA/B,CAAlC;AAEAK,IAAAA,SAAS,GAAGvF,MAAM,CAACuF,SAAD,EAAY;AAC5B,qBAAe,QADa;AAE5B,wBAAkB,IAFU;AAG5B,gBAAU,OAHkB;AAI5B,oBAAc,UAJc;AAK5B,cAAQ,KALoB;AAM5B,qBAAe,IANa;AAO5B,kBAAY,CAPgB;AAQ5B,uBAAiB;AARW,KAAZ,CAAlB;AAWA,WAAOA,SAAP;AAED;;AAED,eAAa5D,mBAAb,CAAiCF,MAAjC,EAAyC;AAEvC,QAAIyD,aAAa,GAAGC,cAAMC,KAAN,CAAY,MAAM1C,iBAAWC,QAAX,CAAoBpC,OAAO,CAAC8E,OAAR,CAAgB,2BAAhB,CAApB,CAAlB,EAAqF;AAAE,kBAAY;AAAd,KAArF,CAApB;;AACA,QAAII,IAAI,GAAG,IAAI3F,IAAJ,CAAS;AAAE,oBAAcoF;AAAhB,KAAT,CAAX;AAEA,QAAIQ,MAAM,GAAG,MAAMD,IAAI,CAACE,QAAL,CAAclE,MAAd,CAAnB;AACA,QAAI6C,OAAO,GAAG,2BAAd;AAEA,QAAI5C,KAAK,GAAG,IAAZ;AACAA,IAAAA,KAAK,GAAGgE,MAAM,CAAC,CAAD,CAAN,CAAUE,QAAV,CACL5B,MADK,CACG6B,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmB,UADlC,EAELjE,GAFK,CAEAgE,OAAD,IAAaA,OAAO,CAACA,OAFpB,EAGLhE,GAHK,CAGAgE,OAAD,IAAa;AAEhB,UAAIE,KAAK,GAAG,IAAZ;;AAEA,UAAIC,YAAGC,GAAH,CAAOC,IAAP,CAAYH,KAAK,GAAGzB,OAAO,CAAC6B,IAAR,CAAaN,OAAb,CAApB,CAAJ,EAAgD;AAC9C,YAAI,GAAInE,KAAJ,IAAcqE,KAAlB;AACA,eAAOrE,KAAP;AACD,OAHD,MAGO;AACL,cAAM,IAAI0E,oEAAJ,CAAsCP,OAAtC,CAAN;AACD;AAEF,KAdK,EAeLzB,MAfK,CAeE,CAACiC,WAAD,EAAc3E,KAAd,KAAwB;AAC9B2E,MAAAA,WAAW,CAAC3E,KAAD,CAAX,GAAqB4E,SAArB;AACA,aAAOD,WAAP;AACD,KAlBK,EAkBH,EAlBG,CAAR;AAoBA3E,IAAAA,KAAK,GAAG6E,MAAM,CAACC,IAAP,CAAY9E,KAAZ,CAAR;AAEA,WAAOA,KAAP;AAED;;AAjTa","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n\nimport { Package } from './package.js'\nimport BlockNode from './node/block-node.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst { 'ESLint': Lint } = ESLint\nconst { 'format': Format } = _Format\nconst Babel = DefaultBabel || ModuleBabel\nconst FilePath = __filePath\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getASTFromContent(content, option) { ... }')\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getSourceFromContent(content, option) { ... }')\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__utility = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n    \n    // let local = null\n    // let countOfLocal = null\n    \n    // let pattern = /eslint-disable-line no-undef/gi\n\n    // do {\n\n    //   local = await this._getLocalFromSource(source)\n    //   countOfLocal = local.length\n\n    //   if (local.includes('__createNode')) {\n\n    //     source = `  function ${TagNode.__getNodeName.toString().replace(pattern, '')}\n    //                 function ${TagNode.__getNodeProperty.toString().replace(pattern, '')}\n    //                 function ${TagNode.__getChildNode.toString().replace(pattern, '')}\n    //                 function ${TagNode.__createNode.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__createNode')\n  \n    //   }\n  \n    //   if (local.includes('__addAttribute')) {\n  \n    //     source = `  function ${AttributeNode.__getAttributeName.toString().replace(pattern, '')}\n    //                 function ${AttributeNode.__getAttributeValue.toString().replace(pattern, '')}\n    //                 function ${AttributeNode.__addAttribute.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__addAttribute')\n  \n    //   }\n  \n    //   if (local.includes('__forEach')) {\n  \n    //     source = `  function ${EachNode.__forEach.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__forEach')\n  \n    //   }\n  \n    //   if (local.includes('__addAndAttribute')) {\n  \n    //     source = `  function ${AndAttributeNode.__addAndAttribute.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__addAndAttribute')\n  \n    //   }\n  \n    // } while (local.length < countOfLocal)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionSourceFromContent(content, option) { ... }')\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __utility = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__utility) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getModuleSourceFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source =  ` // Created by ${Package.name} v${Package.version}\n                // FilePath = '${Path.relative('', FilePath)}'\n                // Path = '${option.path === '(anonymous)' ? '(anonymous)' : Path.relative('', option.path)}'\n                import { Utility } from '@virtualpatterns/mablung-virtual-pug'\n                ${source}\n                export default function(__local = {}, __utility = Utility) { \n                  return __getNode(__local, __utility) \n                }`\n\n    return source\n\n  }\n\n  static async getASTFromPath(path) {\n    // console.log(`Transform.getASTFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n    // console.log(`Transform.getSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n    // console.log('Transform.getFunctionSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n    // console.log(`Transform.getFunctionFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path) {\n    // console.log('Transform.getModuleSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, option = { 'encoding': 'utf-8', 'flag': 'wx' }) {\n    // console.log(`Transform.createModuleFromPath('${Path.relative('', sourcePath)}', '${Path.relative('', targetPath)}', option) { ... }`)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let createModule = []\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`), option))\n    \n      return Promise.all(createModule)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n\n        if (sourceInformation.mtime > targetInformation.mtime) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath)\n        source = await this.formatSource(source, Path.extname(targetPath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule')\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        // console.log(`await FileSystem.writeFile('${Path.relative('', targetPath)}', source, option)`)\n        return FileSystem.writeFile(targetPath, source, option)\n    \n      }\n\n    }\n\n  }\n\n  static async formatSource(sourceIn, environment = Path.extname(FilePath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { 'code': sourceOut } = await Babel.transformAsync(sourceIn, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'preserve',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.cjs"}