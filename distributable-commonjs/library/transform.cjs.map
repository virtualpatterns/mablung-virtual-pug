{"version":3,"sources":["../../source/library/transform.js"],"names":["Babel","DefaultBabel","ModuleBabel","ESLint","Lint","FilePath","__filename","format","Format","BaseFormat","Require","require","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","Lex","Parse","AST","getSourceFromContent","blockNode","BlockNode","blockSource","getSource","source","EachNode","__forEach","toString","AndAttributeNode","__addAndAttribute","AttributeNode","__getAttributeName","__getAttributeValue","__addAttribute","TagNode","__getNodeName","__getNodeProperty","__getChildNode","__createNode","Package","name","version","Path","relative","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","getASTFromPath","FileSystem","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","extname","toUpperCase","writeFile","environment","configuration","JSON5","parse","resolve","env","code","sourceOut","transformAsync","lint","result","lintText","pattern","messages","filter","message","ruleId","match","Is","not","null","exec","UnrecognizedMessageTransformError","reduce","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport BaseFormat from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n// import URL from 'url'\n\nimport AndAttributeNode from './node/and-attribute-node.js'\nimport AttributeNode from './node/attribute-node.js'\nimport BlockNode from './node/block-node.js'\nimport EachNode from './node/each-node.js'\nimport TagNode from './node/tag-node.js'\nimport { Package } from './package.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst Babel = DefaultBabel || ModuleBabel\nconst { ESLint: Lint } = ESLint\nconst FilePath = __filePath\nconst { format: Format } = BaseFormat\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getASTFromContent(content, option) { ... }')\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getSourceFromContent(content, option) { ... }')\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source =  ` function ${EachNode.__forEach.toString()}\n                    function ${AndAttributeNode.__addAndAttribute.toString()}\n                    function ${AttributeNode.__getAttributeName.toString()}\n                    function ${AttributeNode.__getAttributeValue.toString()}\n                    function ${AttributeNode.__addAttribute.toString()}\n                    function ${TagNode.__getNodeName.toString()}\n                    function ${TagNode.__getNodeProperty.toString()}\n                    function ${TagNode.__getChildNode.toString()}\n                    function ${TagNode.__createNode.toString()}\n                    function __getNode(__option = {}) { \n                      // Powered by ${Package.name} v${Package.version}\n                      // FilePath = '${Path.relative('', FilePath)}'\n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionSourceFromContent(content, option) { ... }')\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __option = {}) {\n                  // Powered by ${Package.name} v${Package.version}\n                  // FilePath = '${Path.relative('', FilePath)}'\n                  ${local}\n                  ${source} \n                  return __getNode(__option) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getModuleSourceFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source =  ` import CreateVirtualNode from 'virtual-dom/h.js'\n                import _ConvertToVirtualNode from 'html-to-vdom'\n                import VirtualNode from 'virtual-dom/vnode/vnode.js'\n                import VirtualText from 'virtual-dom/vnode/vtext.js'\n                const ConvertToVirtualNode = _ConvertToVirtualNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n                ${source}\n                export default function(__local = {}, __option = { 'createNode': CreateVirtualNode, 'convertToNode': ConvertToVirtualNode }) { \n                  // Powered by ${Package.name} v${Package.version}\n                  // FilePath = '${Path.relative('', FilePath)}'\n                  return __getNode(__local, __option) \n                }`\n\n    return source\n\n  }\n\n  static async getASTFromPath(path) {\n    // console.log(`Transform.getASTFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n    // console.log(`Transform.getSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n    // console.log('Transform.getFunctionSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n    // console.log(`Transform.getFunctionFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path) {\n    // console.log('Transform.getModuleSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = `${sourcePath}${Path.extname(FilePath)}`, option = { 'encoding': 'utf-8', 'flag': 'wx' }) {\n    // console.log(`Transform.createModuleFromPath('${Path.relative('', sourcePath)}') { ... }`)\n\n    let source = null\n    source = await this.getModuleSourceFromPath(sourcePath)\n    source = await this.formatSource(source, Path.extname(targetPath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule')\n\n    await FileSystem.writeFile(targetPath, source, option)\n\n    // __transformPath does ...\n    //   URL.pathToFileURL if the environment is ESModule\n    //   require.resolve if the environment is CommonJS\n    // return import(__transformPath(targetPath))\n\n  }\n\n  static async formatSource(source, environment = Path.extname(FilePath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { code: sourceOut } = await Babel.transformAsync(source, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'consistent',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.cjs"}