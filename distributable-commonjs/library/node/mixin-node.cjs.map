{"version":3,"sources":["../../../source/library/node/mixin-node.js"],"names":["MixinNode","Node","constructor","node","option","getSource","source","_node","call","blockAttributeNode","BlockAttributeNode","_option","blockAttributeSource","isEmpty","undefined","blockNode","blockSource","block","BlockNode","name","args"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,SAAN,SAAwBC,aAAxB,CAA6B;AAE3BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAI,KAAKC,KAAL,CAAWC,IAAf,EAAqB;AAEnB,UAAIC,kBAAkB,GAAG,IAAIC,2BAAJ,CAAuB,KAAKH,KAA5B,EAAmC,KAAKI,OAAxC,CAAzB;AAEA,UAAIC,oBAAoB,GAAG,IAA3B;AACAA,MAAAA,oBAAoB,GAAG,MAAMH,kBAAkB,CAACJ,SAAnB,EAA7B;AACAO,MAAAA,oBAAoB,GAAGH,kBAAkB,CAACI,OAAnB,GACrBC,SADqB,GAEpB;;aAEIF,oBAAqB;;cAJ5B;AAQA,UAAIG,SAAS,GAAG,IAAhB;AACA,UAAIC,WAAW,GAAG,IAAlB;;AAEA,UAAI,KAAKT,KAAL,CAAWU,KAAf,EAAsB;AACpBF,QAAAA,SAAS,GAAG,IAAIG,kBAAJ,CAAc,KAAKX,KAAL,CAAWU,KAAzB,EAAgC,KAAKN,OAArC,CAAZ;AACAK,QAAAA,WAAW,GAAG,MAAMD,SAAS,CAACV,SAAV,EAApB;AACAW,QAAAA,WAAW,GAAGD,SAAS,CAACF,OAAV,GACZ,IADY,GAEX;;cAEGG,WAAY;;eAJlB;AAOD,OAVD,MAUO;AACLA,QAAAA,WAAW,GAAGF,SAAd;AACD;;AAEDR,MAAAA,MAAM,GAAK;;+BAEc,6BAAW,KAAKC,KAAL,CAAWY,IAAtB,CAA4B;wBACnCP,oBAAqB;wBACrBI,WAAY;wBACZ,KAAKT,KAAL,CAAWa,IAAX,GAAmB,KAAI,KAAKb,KAAL,CAAWa,IAAK,EAAvC,GAA2C,EAAG;;oBALhE;AASD,KAxCD,MAwCO;AAEL,UAAIL,SAAS,GAAG,IAAIG,kBAAJ,CAAc,KAAKX,KAAL,CAAWU,KAAzB,EAAgC,KAAKN,OAArC,CAAhB;AACA,UAAIK,WAAW,GAAG,MAAMD,SAAS,CAACV,SAAV,EAAxB;AAEAC,MAAAA,MAAM,GAAK,sBAAqB,6BAAW,KAAKC,KAAL,CAAWY,IAAtB,CAA4B,oBAAmB,KAAKZ,KAAL,CAAWa,IAAX,GAAmB,KAAI,KAAKb,KAAL,CAAWa,IAAK,EAAvC,GAA2C,EAAG;;;sBAG7GJ,WAAY;;oBAH5B;AAOD;;AAED,WAAOV,MAAP;AAED;;AAlE0B;;eAsEdN,S","sourcesContent":["import Identifier from 'to-js-identifier'\n\nimport BlockAttributeNode from './block-attribute-node.js'\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nclass MixinNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    let source = null\n\n    if (this._node.call) {\n\n      let blockAttributeNode = new BlockAttributeNode(this._node, this._option)\n\n      let blockAttributeSource = null\n      blockAttributeSource = await blockAttributeNode.getSource()\n      blockAttributeSource = blockAttributeNode.isEmpty ? \n        undefined : \n        `(() => { \n           const __attributeNode = {}\n           ${blockAttributeSource}\n           return __attributeNode\n         })()`\n\n      let blockNode = null\n      let blockSource = null\n\n      if (this._node.block) {\n        blockNode = new BlockNode(this._node.block, this._option)\n        blockSource = await blockNode.getSource()\n        blockSource = blockNode.isEmpty ? \n          '[]' : \n          `(() => { \n            const __node = []\n            ${blockSource}\n            return __node\n          })()`\n      } else {\n        blockSource = undefined\n      }\n\n      source =  ` __node.push(\n                    ...\n                    __mixin__${Identifier(this._node.name)}(\n                      ${blockAttributeSource},\n                      ${blockSource}\n                      ${this._node.args ? `, ${this._node.args}` : ''}\n                    )\n                  )`\n\n    } else {\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n      let blockSource = await blockNode.getSource()\n  \n      source =  ` function __mixin__${Identifier(this._node.name)}(attribute, block${this._node.args ? `, ${this._node.args}` : ''}) {\n                    const attributes = attribute\n                    const __node = []\n                    ${blockSource}\n                    return __node\n                  }`\n  \n    }\n\n    return source\n\n  }\n\n}\n\nexport default MixinNode"],"file":"mixin-node.cjs"}