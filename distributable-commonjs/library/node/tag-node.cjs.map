{"version":3,"sources":["../../../source/library/node/tag-node.js"],"names":["TagNode","Node","constructor","node","option","getSource","_node","selfClosing","UnsupportedTagTransformError","blockAttributeNode","BlockAttributeNode","_option","blockAttributeSource","isEmpty","blockNode","BlockNode","block","blockSource","__createNode","isCalled","name","property","childNode","createNodeFn","__getNodeName","__getNodeProperty","__getChildNode","map","entry","Object","entries","sort","leftName","rightName","localeCompare","forEach","value","toUpperCase"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,OAAN,SAAsBC,aAAtB,CAA2B;AAEzBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAI,KAAKC,KAAL,CAAWC,WAAf,EAA4B;AAC1B,YAAM,IAAIC,0DAAJ,CAAiC,KAAKF,KAAtC,CAAN;AACD,KAFD,MAEO;AAEL,UAAIG,kBAAkB,GAAG,IAAIC,2BAAJ,CAAuB,KAAKJ,KAA5B,EAAmC,KAAKK,OAAxC,CAAzB;AAEA,UAAIC,oBAAoB,GAAG,IAA3B;AACAA,MAAAA,oBAAoB,GAAG,MAAMH,kBAAkB,CAACJ,SAAnB,EAA7B;AACAO,MAAAA,oBAAoB,GAAGH,kBAAkB,CAACI,OAAnB,GACrB,IADqB,GAEpB;AACT;AACA,aAAaD,oBAAqB;AAClC;AACA,cANM;AAQA,UAAIE,SAAS,GAAG,IAAIC,kBAAJ,CAAc,KAAKT,KAAL,CAAWU,KAAzB,EAAgC,KAAKL,OAArC,CAAhB;AAEA,UAAIM,WAAW,GAAG,IAAlB;AACAA,MAAAA,WAAW,GAAG,MAAMH,SAAS,CAACT,SAAV,EAApB;AACAY,MAAAA,WAAW,GAAGH,SAAS,CAACD,OAAV,GACZ,IADY,GAEX;AACT;AACA,aAAaI,WAAY;AACzB;AACA,cANM;AAQAjB,MAAAA,OAAO,CAACkB,YAAR,CAAqBC,QAArB,GAAgC,IAAhC;AAEA,aAAS,6BAA4B,KAAKb,KAAL,CAAWc,IAAK,MAAKR,oBAAqB,KAAIK,WAAY,yBAA/F;AAED;AAEF;AAED;;;AACA,SAAOC,YAAP,CAAoBE,IAApB,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,YAA/C,EAA6D;AAE3DH,IAAAA,IAAI,GAAGI,aAAa,CAACJ,IAAD,CAApB,CAF2D,CAEhC;;AAC3BC,IAAAA,QAAQ,GAAGI,iBAAiB,CAACJ,QAAD,CAA5B,CAH2D,CAGpB;;AACvCC,IAAAA,SAAS,GAAGI,cAAc,CAACJ,SAAD,CAA1B,CAJ2D,CAIrB;;AAEtC,WAAOC,YAAY,CAACH,IAAD,EAAO;AAAE,oBAAcC;AAAhB,KAAP,EAAmCC,SAAnC,CAAnB;AAED;AAED;;;AACA,SAAOE,aAAP,CAAqBJ,IAArB,EAA2B;AACzB,WAAOA,IAAP;AACD;AAED;;;AACA,SAAOK,iBAAP,CAAyBJ,QAAzB,EAAmC;AAEjC,QAAIM,GAAG,GAAG,EAAV,CAFiC,CAEpB;;AACb,QAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeT,QAAf,CAAZ;AAEAO,IAAAA,KAAK,CACFG,IADH,CACQ,CAAC,CAAEC,QAAF,CAAD,EAAe,CAAEC,SAAF,CAAf,KAAiCD,QAAQ,CAACE,aAAT,CAAuBD,SAAvB,CADzC,EAEGE,OAFH,CAEW,CAAC,CAAEf,IAAF,EAAQgB,KAAR,CAAD,KAAqB;AAE5B,UAAIhB,IAAI,CAACiB,WAAL,MAAsBV,GAA1B,EAA+B;AAC7B,eAAON,QAAQ,CAACD,IAAD,CAAf;AACAC,QAAAA,QAAQ,CAACM,GAAG,CAACP,IAAI,CAACiB,WAAL,EAAD,CAAH,IAA2BjB,IAA5B,CAAR,GAA4CgB,KAA5C;AACD;AAEF,KATH;AAWA,WAAOf,QAAP;AAED;AAED;;;AACA,SAAOK,cAAP,CAAsBvB,IAAtB,EAA4B;AAC1B,WAAOA,IAAP;AACD;;AApFwB;;eAwFZH,O","sourcesContent":["\nimport BlockAttributeNode from './block-attribute-node.js'\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nimport { UnsupportedTagTransformError } from '../error/unsupported-tag-transform-error.js'\n\nclass TagNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    if (this._node.selfClosing) {\n      throw new UnsupportedTagTransformError(this._node)\n    } else {\n\n      let blockAttributeNode = new BlockAttributeNode(this._node, this._option)\n\n      let blockAttributeSource = null\n      blockAttributeSource = await blockAttributeNode.getSource()\n      blockAttributeSource = blockAttributeNode.isEmpty ? \n        '{}' : \n        `(() => { \n           const __attributeNode = {}\n           ${blockAttributeSource}\n           return __attributeNode\n         })()`\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n\n      let blockSource = null\n      blockSource = await blockNode.getSource()\n      blockSource = blockNode.isEmpty ? \n        '[]' : \n        `(() => { \n           const __node = []\n           ${blockSource}\n           return __node\n         })()`\n\n      TagNode.__createNode.isCalled = true\n\n      return  `__node.push(__createNode('${this._node.name}', ${blockAttributeSource}, ${blockSource}, __option.createNode))`\n\n    }\n\n  }\n\n  /* c8 ignore next 9 */\n  static __createNode(name, property, childNode, createNodeFn) {\n\n    name = __getNodeName(name) // eslint-disable-line no-undef\n    property = __getNodeProperty(property) // eslint-disable-line no-undef\n    childNode = __getChildNode(childNode) // eslint-disable-line no-undef\n\n    return createNodeFn(name, { 'attributes': property }, childNode)\n\n  }\n\n  /* c8 ignore next 3 */\n  static __getNodeName(name) {\n    return name\n  }\n\n  /* c8 ignore next 17 */\n  static __getNodeProperty(property) {\n\n    let map = {} // { 'CLASS': 'className', 'FOR': 'htmlFor', 'HTTP-EQUIV': 'httpEquiv' }\n    let entry = Object.entries(property)\n\n    entry\n      .sort(([ leftName ], [ rightName ]) => leftName.localeCompare(rightName))\n      .forEach(([ name, value ]) => {\n\n        if (name.toUpperCase() in map) {\n          delete property[name]\n          property[map[name.toUpperCase()] || name] = value\n        }\n\n      })\n\n    return property\n\n  }\n\n  /* c8 ignore next 3 */\n  static __getChildNode(node) {\n    return node\n  }\n\n}\n\nexport default TagNode"],"file":"tag-node.cjs"}