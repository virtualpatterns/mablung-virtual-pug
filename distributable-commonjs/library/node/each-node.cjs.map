{"version":3,"sources":["../../../source/library/node/each-node.js"],"names":["EachNode","Node","constructor","node","option","getSource","source","blockNode","BlockNode","_node","block","_option","blockSource","isEmpty","__forEach","isCalled","obj","val","key","alternate","alternateNode","alternateSource","value","fn","Array","isArray","forEach","length","entry","Object","entries","name"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA,MAAMA,QAAN,SAAuBC,aAAvB,CAA4B;AAE1BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAIC,MAAM,GAAG,IAAb;AAEA,QAAIC,SAAS,GAAG,IAAIC,kBAAJ,CAAc,KAAKC,KAAL,CAAWC,KAAzB,EAAgC,KAAKC,OAArC,CAAhB;AACA,QAAIC,WAAW,GAAGL,SAAS,CAACM,OAAV,GAAoB,EAApB,GAAyB,MAAMN,SAAS,CAACF,SAAV,EAAjD;AAEAL,IAAAA,QAAQ,CAACc,SAAT,CAAmBC,QAAnB,GAA8B,IAA9B;AAEAT,IAAAA,MAAM,GAAK,cAAa,KAAKG,KAAL,CAAWO,GAAI,MAAK,KAAKP,KAAL,CAAWQ,GAAI,GAAE,KAAKR,KAAL,CAAWS,GAAX,GAAkB,KAAI,KAAKT,KAAL,CAAWS,GAAI,EAArC,GAAyC,EAAG;AAC7G,oBAAoBN,WAAY;AAChC,mBAFI;;AAIA,QAAI,KAAKH,KAAL,CAAWU,SAAf,EAA0B;AAExB,UAAIC,aAAa,GAAG,IAAIZ,kBAAJ,CAAc,KAAKC,KAAL,CAAWU,SAAzB,EAAoC,KAAKR,OAAzC,CAApB;AACA,UAAIU,eAAe,GAAGD,aAAa,CAACP,OAAd,GAAwB,EAAxB,GAA6B,MAAMO,aAAa,CAACf,SAAd,EAAzD;AAEAC,MAAAA,MAAM,GAAK,QAAOA,MAAO;AAC/B,sBAAsBe,eAAgB;AACtC,oBAFM;AAID;;AAED,WAAOf,MAAP;AAED;AAED;;;AACA,SAAOQ,SAAP,CAAiBQ,KAAjB,EAAwBC,EAAxB,EAA4B;AAE1B,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AAExBA,MAAAA,KAAK,CAACI,OAAN,CAAcH,EAAd;AACA,aAAOD,KAAK,CAACK,MAAb;AAED,KALD,MAKO;AAEL,UAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeR,KAAf,CAAZ;AAEAM,MAAAA,KAAK,CAACF,OAAN,CAAc,CAAC,CAAEK,IAAF,EAAQT,KAAR,CAAD,KAAqBC,EAAE,CAACD,KAAD,EAAQS,IAAR,CAArC;AACA,aAAOH,KAAK,CAACD,MAAb;AAED;AAEF;;AAnDyB;;eAuDb3B,Q","sourcesContent":["\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nclass EachNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    let source = null\n\n    let blockNode = new BlockNode(this._node.block, this._option)\n    let blockSource = blockNode.isEmpty ? '' : await blockNode.getSource()\n\n    EachNode.__forEach.isCalled = true\n    \n    source =  ` __forEach(${this._node.obj}, (${this._node.val}${this._node.key ? `, ${this._node.key}` : ''}) => { \n                  ${blockSource}\n                })`\n\n    if (this._node.alternate) {\n\n      let alternateNode = new BlockNode(this._node.alternate, this._option)\n      let alternateSource = alternateNode.isEmpty ? '' : await alternateNode.getSource()\n  \n      source =  ` if (${source} <= 0) {\n                    ${alternateSource}\n                  }`\n\n    }\n\n    return source\n\n  }\n\n  /* c8 ignore next 17 */\n  static __forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n}\n\nexport default EachNode"],"file":"each-node.cjs"}