{"version":3,"sources":["../../../source/library/node/case-node.js"],"names":["CaseNode","Node","constructor","node","option","getSource","blockWhenNode","BlockWhenNode","_node","block","_option","blockWhenSource","isEmpty","expr"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA,MAAMA,QAAN,SAAuBC,aAAvB,CAA4B;AAE1BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAIC,aAAa,GAAG,IAAIC,sBAAJ,CAAkB,KAAKC,KAAL,CAAWC,KAA7B,EAAoC,KAAKC,OAAzC,CAApB;AAEA,QAAIC,eAAe,GAAG,IAAtB;AACAA,IAAAA,eAAe,GAAG,MAAML,aAAa,CAACD,SAAd,EAAxB;AACAM,IAAAA,eAAe,GAAGL,aAAa,CAACM,OAAd,GAChB,KADgB,GAEf;AACP,YAAYD,eAAgB;AAC5B,UAJI;AAMA,WAAS,WAAU,KAAKH,KAAL,CAAWK,IAAK,KAAIF,eAAgB,EAAvD;AAED;;AApByB;;eAwBbX,Q","sourcesContent":["\nimport BlockWhenNode from './block-when-node.js'\nimport Node from '../node.js'\n\nclass CaseNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    let blockWhenNode = new BlockWhenNode(this._node.block, this._option)\n\n    let blockWhenSource = null\n    blockWhenSource = await blockWhenNode.getSource()\n    blockWhenSource = blockWhenNode.isEmpty ? \n      ' {}' : \n      ` { \n          ${blockWhenSource}\n        }`\n\n    return  ` switch(${this._node.expr}) ${blockWhenSource}`\n\n  }\n\n}\n\nexport default CaseNode"],"file":"case-node.cjs"}