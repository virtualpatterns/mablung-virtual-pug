{"version":3,"sources":["../../../source/test/library/scenario.js"],"names":["FilePath","__filename","Scenario","constructor","path","local","_path","_local","modifierPattern","modifier","match","Is","not","null","exec","push","lastIndex","_modifier","getHTML","realHTML","Pug","compileFile","sourcePath","targetPath","Path","extname","Transform","createModuleFromPath","module","require","resolve","virtualFn","default","virtualNode","virtualHTML","map","toString","join","createScenarioFromFolder","includePattern","excludePattern","item","FileSystem","readdir","createScenario","concat","filter","isDirectory","folder","name","isFile","file","reduce","isMatch","pattern","createScenarioFromFile","scenario","Promise","all","flat","localPath","pathExists"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\nimport Format from 'pretty'\nimport Is from '@pwn/is'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Pug from 'pug'\n\nimport CreateRealNode from 'virtual-dom/create-element.js'\n\nimport { Transform } from '../../index.js'\n\nconst FilePath = __filePath\n\nclass Scenario {\n\n  constructor(path, local = {}) {\n\n    this._path = path\n    this._local = local\n\n    let modifierPattern = /\\.(.*?)\\./g\n    let modifier = []\n\n    let match = null\n\n    while (Is.not.null(match = modifierPattern.exec(path))) {\n      modifier.push(match[1])\n      modifierPattern.lastIndex --\n    }\n\n    this._modifier = modifier\n\n  }\n\n  get path() {\n    return this._path\n  }\n\n  get local() {\n    return this._local\n  }\n\n  get modifier() {\n    return this._modifier\n  }\n\n  async getHTML() {\n\n    let realHTML = null\n    realHTML = Pug.compileFile(this._path)(this._local)\n    realHTML = Format(realHTML)\n\n    let sourcePath = this._path\n    let targetPath = `${sourcePath}${Path.extname(FilePath)}`\n\n    await Transform.createModuleFromPath(sourcePath, targetPath)\n\n    // __transformPath does ...\n    //   URL.pathToFileURL if the environment is ESModule\n    //   require.resolve if the environment is CommonJS\n    let module = await import(__transformPath(targetPath))\n    let virtualFn = module.default\n    let virtualNode = virtualFn(this._local)\n\n    let virtualHTML = null\n    virtualHTML = virtualNode.map((virtualNode) => CreateRealNode(virtualNode).toString()) \n    virtualHTML = virtualHTML.join('')\n    virtualHTML = Format(virtualHTML)\n\n    return {\n      realHTML,\n      virtualHTML\n    }\n  }\n\n  static async createScenarioFromFolder(path, includePattern = [ '*.pug' ], excludePattern = [ '*.skip.pug' ]) {\n  \n    let item = await FileSystem.readdir(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n    let createScenario = []\n\n    createScenario = createScenario.concat(item\n      .filter((item) => item.isDirectory())\n      .map((folder) => this.createScenarioFromFolder(`${path}/${folder.name}`, includePattern, excludePattern)))\n\n    createScenario = createScenario.concat(item\n      .filter((item) => item.isFile())\n      .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      .map((file) => this.createScenarioFromFile(`${path}/${file.name}`)))\n\n    let scenario = await Promise.all(createScenario)\n  \n    return scenario.flat()\n  \n  }\n  \n  static async createScenarioFromFile(path) {\n  \n    let localPath = `${path}.js`\n    let local = {}\n  \n    if (await FileSystem.pathExists(localPath)) {\n  \n      let module = null\n      module = await import(localPath)\n      module = module.default || module\n  \n      local = module\n  \n    }\n  \n    return new Scenario(path, local)\n  \n  }\n  \n}\n\nexport { Scenario }"],"file":"scenario.cjs"}