{"version":3,"sources":["../../../source/test/library/transform.test.js"],"names":["FilePath","__filename","FolderPath","Path","dirname","Require","require","test","notThrowsAsync","Transform","getASTFromPath","resolve","getSourceFromPath","getFunctionSourceFromPath","module","createModuleFromPath","virtualFn","default","notThrows","forEach","path","relative","throwsAsync","getFunctionFromPath","UnsupportedAttributeTransformError","UnsupportedCodeTransformError","UnsupportedCommentTransformError","UnsupportedDocTypeTransformError","UnsupportedTagTransformError"],"mappings":"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","sourcesContent":["import Path from 'path'\nimport Test from 'ava'\n\n// import CreateNode from 'virtual-dom/h.js'\n\n// import _ConvertToNode from 'html-to-vdom'\n// import VirtualNode from 'virtual-dom/vnode/vnode.js'\n// import VirtualText from 'virtual-dom/vnode/vtext.js'\n\nimport { Transform } from '../../index.js'\n\nimport { UnsupportedAttributeTransformError } from '../../index.js'\nimport { UnsupportedCodeTransformError } from '../../index.js'\nimport { UnsupportedCommentTransformError } from '../../index.js'\nimport { UnsupportedDocTypeTransformError } from '../../index.js'\nimport { UnsupportedTagTransformError } from '../../index.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Require = __require\n\n// const ConvertToNode = _ConvertToNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n\nTest('getASTFromPath(path)', async (test) => {\n  await test.notThrowsAsync(Transform.getASTFromPath(Require.resolve('./resource/00-default.pug')))\n})\n\nTest('getSourceFromPath(path)', async (test) => {\n  await test.notThrowsAsync(Transform.getSourceFromPath(Require.resolve('./resource/00-default.pug')))\n})\n\nTest('getFunctionSourceFromPath(path)', async (test) => {\n  await test.notThrowsAsync(Transform.getFunctionSourceFromPath(Require.resolve('./resource/00-default.pug')))\n})\n\nTest('createModuleFromPath(path)', async (test) => {\n\n  let module = await Transform.createModuleFromPath(Require.resolve('./resource/00-default.pug'))\n  let virtualFn = module.default\n\n  test.notThrows(() => virtualFn())\n\n})\n\n;[ \n  Require.resolve('./resource/transform/attribute/07-escaped-attributes.pug') \n].forEach((path) => {\n\n  Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}') throws UnsupportedAttributeTransformError`, async (test) => {\n    await test.throwsAsync(Transform.getFunctionFromPath(path), { 'instanceOf': UnsupportedAttributeTransformError })\n  })\n  \n})\n\n;[ \n  Require.resolve('./resource/transform/code/04-escaped-buffered-code.pug'),\n  Require.resolve('./resource/transform/code/05-escaped-buffered-inline-code.pug')\n].forEach((path) => {\n\n  Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}') throws UnsupportedCodeTransformError`, async (test) => {\n    await test.throwsAsync(Transform.getFunctionFromPath(path), { 'instanceOf': UnsupportedCodeTransformError })\n  })\n\n})\n\n;[ \n  Require.resolve('./resource/transform/comment/00-default-buffered.pug'),\n  Require.resolve('./resource/transform/comment/02-block-buffered-comment.pug')\n].forEach((path) => {\n\n  Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}') throws UnsupportedCommentTransformError`, async (test) => {\n    await test.throwsAsync(Transform.getFunctionFromPath(path), { 'instanceOf': UnsupportedCommentTransformError })\n  })\n\n})\n\n;[ \n  Require.resolve('./resource/transform/doctype/00-default.pug')\n].forEach((path) => {\n\n  Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}') throws UnsupportedDocTypeTransformError`, async (test) => {\n    await test.throwsAsync(Transform.getFunctionFromPath(path), { 'instanceOf': UnsupportedDocTypeTransformError })\n  })\n\n})\n\n;[ \n  Require.resolve('./resource/transform/tag/02-self-closing-tag.pug')\n].forEach((path) => {\n\n  Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}') throws UnsupportedTagTransformError`, async (test) => {\n    await test.throwsAsync(Transform.getFunctionFromPath(path), { 'instanceOf': UnsupportedTagTransformError })\n  })\n\n})\n\n// This had already existed in scenario.test\n// ;[ \n//   Require.resolve('./resource/transform/text/01-literal-html.only.pug')\n// ].forEach((path) => {\n\n//   Test(`getFunctionFromPath('${Path.relative(`${FolderPath}/resource/transform`, path)}')(...) throws TypeError`, async (test) => {\n//     await test.throwsAsync(Transform.getFunctionFromPath(path).then((virtualFn) => virtualFn({}, { 'createNode': CreateNode, 'convertToNode': ConvertToNode })), { 'instanceOf': TypeError })\n//   })\n\n// })\n"],"file":"transform.test.cjs"}