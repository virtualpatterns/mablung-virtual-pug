{"version":3,"sources":["../../../source/test/library/scenario.test.js"],"names":["FilePath","__filename","FolderPath","Path","dirname","Require","require","main","Scenario","createScenarioFromFolder","forEach","scenario","Test","modifier","reduce","__Test","_Test","relative","path","test","virtualHTML","realHTML","getHTML","log","repeat","is","resolve","createScenarioFromFile","throwsAsync","TypeError","not"],"mappings":"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","sourcesContent":["import Path from 'path'\nimport _Test from 'ava'\n\nimport { Scenario } from './scenario.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Require = __require\n\nasync function main() {\n\n  (await Scenario.createScenarioFromFolder(`${FolderPath}/resource/scenario`)).forEach((scenario) => {\n\n    let Test = scenario.modifier.reduce((__Test, modifier) => __Test[modifier], _Test)\n\n    Test(`getHTML() using '${Path.relative(`${FolderPath}/resource/scenario`, scenario.path)}'`, async (test) => {\n\n      let { virtualHTML, realHTML } = await scenario.getHTML()\n\n      if (virtualHTML !== realHTML) {\n\n        test.log('-'.repeat(80))\n        test.log('realHTML')\n        test.log('-'.repeat(80))\n        test.log(realHTML)\n\n        test.log('-'.repeat(80))\n        test.log('virtualHTML')\n        test.log('-'.repeat(80))\n        test.log(virtualHTML)\n        test.log('-'.repeat(80))\n\n      }\n\n      test.is(virtualHTML, realHTML)\n\n    })\n\n  })\n\n  ;[ \n    Require.resolve('./resource/scenario/text/01-literal-html.skip.pug')\n  ].forEach((path) => {\n\n    _Test(`getHTML() using '${Path.relative(`${FolderPath}/resource/scenario`, path)}' throws TypeError`, async (test) => {\n      let scenario = await Scenario.createScenarioFromFile(path)\n      await test.throwsAsync(scenario.getHTML(), { 'instanceOf': TypeError })\n    })\n\n  })\n\n  ;[ \n    Require.resolve('./resource/scenario/attribute/03-multiline-attribute.skip.pug'),\n    Require.resolve('./resource/scenario/comment/04-conditional-comment.skip.pug'),\n    Require.resolve('./resource/scenario/filter/02-nested-filter.skip.pug'),\n    Require.resolve('./resource/scenario/include/02-filtered-text.skip.pug')\n  ].forEach((path) => {\n\n    _Test(`getHTML() using '${Path.relative(`${FolderPath}/resource/scenario`, path)}' does not match Pug`, async (test) => {\n\n      let scenario = await Scenario.createScenarioFromFile(path)\n      let { virtualHTML, realHTML } = await scenario.getHTML()\n\n      test.not(virtualHTML, realHTML)\n\n    })\n\n  })\n\n}\n\nmain()\n"],"file":"scenario.test.cjs"}