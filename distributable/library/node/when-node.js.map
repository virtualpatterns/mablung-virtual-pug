{"version":3,"sources":["../../../source/library/node/when-node.js"],"names":["WhenNode","Node","constructor","node","option","getSource","_node","block","blockNode","BlockNode","_option","blockSource","isEmpty","expr","nodes","length","type","toUpperCase","val"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA,MAAMA,QAAN,SAAuBC,aAAvB,CAA4B;AAE1BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA,QAAI,KAAKC,KAAL,CAAWC,KAAf,EAAsB;AAEpB,UAAIC,SAAS,GAAG,IAAIC,kBAAJ,CAAc,KAAKH,KAAL,CAAWC,KAAzB,EAAgC,KAAKG,OAArC,CAAhB;AACA,UAAIC,WAAW,GAAGH,SAAS,CAACI,OAAV,GAAoB,EAApB,GAAyB,MAAMJ,SAAS,CAACH,SAAV,EAAjD;;AAEA,UAAI,KAAKC,KAAL,CAAWO,IAAX,KAAoB,SAAxB,EAAmC;AACjC,eAAS;sBACKF,WAAY,EAD1B;AAGD,OAJD,MAIO;AAEL,YAAI,KAAKL,KAAL,CAAWC,KAAX,CAAiBO,KAAjB,CAAuBC,MAAvB,KAAkC,CAAlC,IACA,KAAKT,KAAL,CAAWC,KAAX,CAAiBO,KAAjB,CAAuB,CAAvB,EAA0BE,IAA1B,CAA+BC,WAA/B,OAAiD,MADjD,IAEA,KAAKX,KAAL,CAAWC,KAAX,CAAiBO,KAAjB,CAAuB,CAAvB,EAA0BI,GAA1B,KAAkC,OAFtC,EAE+C;AAC7C,iBAAS,SAAQ,KAAKZ,KAAL,CAAWO,IAAK;4BAAjC;AAED,SALD,MAKO;AACL,iBAAS,SAAQ,KAAKP,KAAL,CAAWO,IAAK;wBACnBF,WAAY;4BAD1B;AAGD;AAGF;AAEF,KAzBD,MAyBO;AACL,aAAQ,QAAO,KAAKL,KAAL,CAAWO,IAAK,GAA/B;AACD;AAEF;;AA5DyB;;eAgEbb,Q","sourcesContent":["\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nclass WhenNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    // if (node.expr == 'default') {\n    //   source.push(`${node.expr}:`)\n    //   this.processBlock(node.block, source)\n    // } else {\n\n    //   source.push(`case ${node.expr}:`)\n\n    //   if (node.block) {\n\n    //     if (node.block.nodes.length == 1 &&\n    //         node.block.nodes[0].type.toUpperCase() == 'CODE' &&\n    //         node.block.nodes[0].val == 'break') {\n    //       // OK\n    //     } else {\n    //       this.processBlock(node.block, source)\n    //     }\n\n    //     source.push('break')\n\n    //   }\n\n    // }\n\n    if (this._node.block) {\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n      let blockSource = blockNode.isEmpty ? '' : await blockNode.getSource()\n  \n      if (this._node.expr === 'default') {\n        return  ` default: \n                    ${blockSource}`\n                   \n      } else {\n\n        if (this._node.block.nodes.length === 1 &&\n            this._node.block.nodes[0].type.toUpperCase() === 'CODE' &&\n            this._node.block.nodes[0].val === 'break') {\n          return  ` case ${this._node.expr}: \n                      break`\n        } else {\n          return  ` case ${this._node.expr}: \n                      ${blockSource}\n                      break`\n        }\n\n\n      }\n  \n    } else {\n      return `case ${this._node.expr}:`\n    }\n\n  }\n\n}\n\nexport default WhenNode"],"file":"when-node.js"}