{"version":3,"sources":["../../source/library/transform.js"],"names":["DefaultBabel","ModuleBabel","ESLint","FileSystem","_Format","Is","JSON5","Lex","Link","Load","Match","Merge","Parse","Path","Package","BlockNode","UnrecognizedMessageTransformError","Lint","Format","Babel","FilePath","_URL","fileURLToPath","import","meta","url","Require","_createRequire","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","AST","getSourceFromContent","blockNode","blockSource","getSource","source","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","userOption","defaultOption","name","version","relative","utility","getASTFromPath","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","includePattern","excludePattern","item","readdir","createModule","concat","filter","folder","isFile","file","reduce","isMatch","pattern","Promise","all","isCreated","pathExists","targetInformation","mtime","toUpperCase","ensureDir","writeFile","encoding","flag","resolve","sourceIn","environment","configuration","parse","env","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","not","null","exec","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Merge from 'deepmerge'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n\nimport { Package } from './package.js'\nimport BlockNode from './node/block-node.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst { 'ESLint': Lint } = ESLint\nconst { 'format': Format } = _Format\nconst Babel = DefaultBabel || ModuleBabel\nconst FilePath = __filePath\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__utility = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __utility = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__utility) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, userOption = {}) {\n\n    let defaultOption = {\n      'path': '(unknown)',\n      'utility': '@virtualpatterns/mablung-virtual-pug/utility'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, { 'path': option.path })\n    source =  ` // Created by ${Package.name} v${Package.version}\n                // Path = ${option.path === '(unknown)' ? option.path : `'${Path.relative('', option.path)}'`}\n                import Utility from '${option.utility}'\n                ${source}\n                export default function(__local = {}, __utility = Utility) { \n                  return __getNode(__local, __utility) \n                }`\n\n    return source\n\n  }\n\n  static async getASTFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path, option) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { ...option, 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, userOption = {}) {\n\n    let defaultOption = {\n      'encoding': 'utf-8',\n      'flag': 'wx'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let createModule = []\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`, option)))\n    \n      return Promise.all(createModule)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n\n        // console.log(`Existing '${Path.relative('', targetPath)}' ...`)\n        // console.log(`Source ${sourceInformation.mtime}`)\n        // console.log(`Target ${targetInformation.mtime}`)\n\n        if (sourceInformation.mtime >= targetInformation.mtime) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath, option)\n        source = await this.formatSource(source, Path.extname(targetPath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule')\n\n        // console.log(`Creating '${Path.relative('', targetPath)}' ...`)\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        return FileSystem.writeFile(targetPath, source, { 'encoding': option.encoding, 'flag': option.flag })\n    \n      } else {\n        return Promise.resolve()\n      }\n\n    }\n\n  }\n\n  static async formatSource(sourceIn, environment = Path.extname(FilePath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { 'code': sourceOut } = await Babel.transformAsync(sourceIn, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'preserve',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.js"}