{"version":3,"sources":["../../source/library/transform.js"],"names":["DefaultBabel","ModuleBabel","ESLint","FileSystem","_Format","Is","JSON5","Lex","Link","Load","Match","Parse","Path","Package","BlockNode","UnrecognizedMessageTransformError","Lint","Format","Babel","FilePath","_URL","fileURLToPath","import","meta","url","Require","_createRequire","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","AST","getSourceFromContent","blockNode","blockSource","getSource","source","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","name","version","relative","getASTFromPath","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","includePattern","excludePattern","item","readdir","createModule","concat","filter","folder","isFile","file","reduce","isMatch","pattern","Promise","all","isCreated","pathExists","targetInformation","mtime","toUpperCase","ensureDir","writeFile","sourceIn","environment","configuration","parse","resolve","env","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","not","null","exec","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n\nimport { Package } from './package.js'\nimport BlockNode from './node/block-node.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst { 'ESLint': Lint } = ESLint\nconst { 'format': Format } = _Format\nconst Babel = DefaultBabel || ModuleBabel\nconst FilePath = __filePath\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getASTFromContent(content, option) { ... }')\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getSourceFromContent(content, option) { ... }')\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__utility = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n    \n    // let local = null\n    // let countOfLocal = null\n    \n    // let pattern = /eslint-disable-line no-undef/gi\n\n    // do {\n\n    //   local = await this._getLocalFromSource(source)\n    //   countOfLocal = local.length\n\n    //   if (local.includes('__createNode')) {\n\n    //     source = `  function ${TagNode.__getNodeName.toString().replace(pattern, '')}\n    //                 function ${TagNode.__getNodeProperty.toString().replace(pattern, '')}\n    //                 function ${TagNode.__getChildNode.toString().replace(pattern, '')}\n    //                 function ${TagNode.__createNode.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__createNode')\n  \n    //   }\n  \n    //   if (local.includes('__addAttribute')) {\n  \n    //     source = `  function ${AttributeNode.__getAttributeName.toString().replace(pattern, '')}\n    //                 function ${AttributeNode.__getAttributeValue.toString().replace(pattern, '')}\n    //                 function ${AttributeNode.__addAttribute.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__addAttribute')\n  \n    //   }\n  \n    //   if (local.includes('__forEach')) {\n  \n    //     source = `  function ${EachNode.__forEach.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__forEach')\n  \n    //   }\n  \n    //   if (local.includes('__addAndAttribute')) {\n  \n    //     source = `  function ${AndAttributeNode.__addAndAttribute.toString().replace(pattern, '')}\n    //                 ${source}`\n  \n    //     local = local\n    //       .filter((local) => local !== '__addAndAttribute')\n  \n    //   }\n  \n    // } while (local.length < countOfLocal)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionSourceFromContent(content, option) { ... }')\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __utility = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__utility) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getModuleSourceFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source =  ` // Created by ${Package.name} v${Package.version}\n                // FilePath = '${Path.relative('', FilePath)}'\n                // Path = '${option.path === '(anonymous)' ? '(anonymous)' : Path.relative('', option.path)}'\n                import { Utility } from '@virtualpatterns/mablung-virtual-pug'\n                ${source}\n                export default function(__local = {}, __utility = Utility) { \n                  return __getNode(__local, __utility) \n                }`\n\n    return source\n\n  }\n\n  static async getASTFromPath(path) {\n    // console.log(`Transform.getASTFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n    // console.log(`Transform.getSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n    // console.log('Transform.getFunctionSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n    // console.log(`Transform.getFunctionFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path) {\n    // console.log('Transform.getModuleSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, option = { 'encoding': 'utf-8', 'flag': 'wx' }) {\n    // console.log(`Transform.createModuleFromPath('${Path.relative('', sourcePath)}', '${Path.relative('', targetPath)}', option) { ... }`)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let createModule = []\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`), option))\n    \n      return Promise.all(createModule)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n\n        if (sourceInformation.mtime > targetInformation.mtime) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath)\n        source = await this.formatSource(source, Path.extname(targetPath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule')\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        // console.log(`await FileSystem.writeFile('${Path.relative('', targetPath)}', source, option)`)\n        return FileSystem.writeFile(targetPath, source, option)\n    \n      }\n\n    }\n\n  }\n\n  static async formatSource(sourceIn, environment = Path.extname(FilePath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { 'code': sourceOut } = await Babel.transformAsync(sourceIn, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'preserve',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.js"}