{"version":3,"sources":["../../source/library/transform.js"],"names":["DefaultBabel","ModuleBabel","ESLint","FileSystem","_Format","Is","JSON5","Lex","Link","Load","Match","Parse","Path","AndAttributeNode","AttributeNode","BlockNode","EachNode","TagNode","Package","UnrecognizedMessageTransformError","Babel","Lint","FilePath","_URL","fileURLToPath","import","meta","url","format","Format","Require","_createRequire","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","AST","getSourceFromContent","blockNode","blockSource","getSource","source","local","countOfLocal","pattern","_getLocalFromSource","length","includes","__getNodeName","toString","replace","__getNodeProperty","__getChildNode","__createNode","filter","__getAttributeName","__getAttributeValue","__addAttribute","__forEach","__addAndAttribute","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","name","version","relative","getASTFromPath","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","includePattern","excludePattern","item","readdir","createModule","concat","folder","isFile","file","reduce","isMatch","Promise","all","isCreated","pathExists","targetInformation","mtime","toUpperCase","ensureDir","writeFile","environment","configuration","parse","resolve","env","code","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","not","null","exec","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n// import URL from 'url'\n\nimport AndAttributeNode from './node/and-attribute-node.js'\nimport AttributeNode from './node/attribute-node.js'\nimport BlockNode from './node/block-node.js'\nimport EachNode from './node/each-node.js'\nimport TagNode from './node/tag-node.js'\nimport { Package } from './package.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst Babel = DefaultBabel || ModuleBabel\nconst { ESLint: Lint } = ESLint\nconst FilePath = __filePath\nconst { format: Format } = _Format\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getASTFromContent(content, option) { ... }')\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getSourceFromContent(content, option) { ... }')\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__option = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = null\n    let countOfLocal = null\n    \n    let pattern = /eslint-disable-line no-undef/gi\n\n    do {\n\n      local = await this._getLocalFromSource(source)\n      countOfLocal = local.length\n\n      if (local.includes('__createNode')) {\n\n        source = `  function ${TagNode.__getNodeName.toString().replace(pattern, '')}\n                    function ${TagNode.__getNodeProperty.toString().replace(pattern, '')}\n                    function ${TagNode.__getChildNode.toString().replace(pattern, '')}\n                    function ${TagNode.__createNode.toString().replace(pattern, '')}\n                    ${source}`\n  \n        local = local\n          .filter((local) => local !== '__createNode')\n  \n      }\n  \n      if (local.includes('__addAttribute')) {\n  \n        source = `  function ${AttributeNode.__getAttributeName.toString().replace(pattern, '')}\n                    function ${AttributeNode.__getAttributeValue.toString().replace(pattern, '')}\n                    function ${AttributeNode.__addAttribute.toString().replace(pattern, '')}\n                    ${source}`\n  \n        local = local\n          .filter((local) => local !== '__addAttribute')\n  \n      }\n  \n      if (local.includes('__forEach')) {\n  \n        source = `  function ${EachNode.__forEach.toString().replace(pattern, '')}\n                    ${source}`\n  \n        local = local\n          .filter((local) => local !== '__forEach')\n  \n      }\n  \n      if (local.includes('__addAndAttribute')) {\n  \n        source = `  function ${AndAttributeNode.__addAndAttribute.toString().replace(pattern, '')}\n                    ${source}`\n  \n        local = local\n          .filter((local) => local !== '__addAndAttribute')\n  \n      }\n  \n    } while (local.length < countOfLocal)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionSourceFromContent(content, option) { ... }')\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __option = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__option) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getModuleSourceFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source =  ` // Powered by ${Package.name} v${Package.version}\n                // FilePath = '${Path.relative('', FilePath)}'\n                import CreateVirtualNode from 'virtual-dom/h.js'\n                import _ConvertToVirtualNode from 'html-to-vdom'\n                import VirtualNode from 'virtual-dom/vnode/vnode.js'\n                import VirtualText from 'virtual-dom/vnode/vtext.js'\n                const ConvertToVirtualNode = _ConvertToVirtualNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n                ${source}\n                export default function(__local = {}, __option = { 'createNode': CreateVirtualNode, 'convertToNode': ConvertToVirtualNode }) { \n                  return __getNode(__local, __option) \n                }`\n\n    return source\n\n  }\n\n  static async getASTFromPath(path) {\n    // console.log(`Transform.getASTFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n    // console.log(`Transform.getSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n    // console.log('Transform.getFunctionSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n    // console.log(`Transform.getFunctionFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path) {\n    // console.log('Transform.getModuleSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, option = { 'encoding': 'utf-8', 'flag': 'wx' }) {\n    // console.log(`Transform.createModuleFromPath('${Path.relative('', sourcePath)}', '${Path.relative('', targetPath)}', option) { ... }`)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let createModule = []\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`), option))\n    \n      return Promise.all(createModule)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n\n        if (sourceInformation.mtime > targetInformation.mtime) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath)\n        source = await this.formatSource(source, Path.extname(targetPath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule')\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        // console.log(`await FileSystem.writeFile('${Path.relative('', targetPath)}', source, option)`)\n        return FileSystem.writeFile(targetPath, source, option)\n    \n      }\n\n    }\n\n  }\n\n  static async formatSource(source, environment = Path.extname(FilePath).toUpperCase() === '.CJS' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { code: sourceOut } = await Babel.transformAsync(source, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'consistent',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.js"}