{"version":3,"sources":["../../source/library/transform.js"],"names":["DefaultBabel","ModuleBabel","ESLint","FileSystem","BaseFormat","Is","JSON5","Lex","Link","Load","Parse","Path","AndAttributeNode","AttributeNode","BlockNode","EachNode","TagNode","Package","UnrecognizedMessageTransformError","Babel","Lint","FilePath","_URL","fileURLToPath","import","meta","url","format","Format","Require","_createRequire","Transform","getASTFromContent","content","option","lexerOutput","path","parserOutput","loaderOutput","AST","getSourceFromContent","blockNode","blockSource","getSource","source","__forEach","toString","__addAndAttribute","__getAttributeName","__getAttributeValue","__addAttribute","__getNodeName","__getNodeProperty","__getChildNode","__createNode","name","version","relative","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getASTFromPath","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","createModuleFromPath","extension","extname","modulePath","writeFile","_URL2","pathToFileURL","toLowerCase","configuration","parse","resolve","env","code","sourceOut","transformAsync","lint","result","lintText","pattern","messages","filter","message","ruleId","match","not","null","exec","reduce","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport BaseFormat from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n// import URL from 'url'\n\nimport AndAttributeNode from './node/and-attribute-node.js'\nimport AttributeNode from './node/attribute-node.js'\nimport BlockNode from './node/block-node.js'\nimport EachNode from './node/each-node.js'\nimport TagNode from './node/tag-node.js'\nimport { Package } from './package.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst Babel = DefaultBabel || ModuleBabel\nconst { ESLint: Lint } = ESLint\nconst FilePath = __filePath\nconst { format: Format } = BaseFormat\nconst Require = __require\n\nclass Transform {\n  \n  static getASTFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getASTFromContent(content, option) { ... }')\n\n    let lexerOutput = Lex(content, { 'filename': option.path })\n    let parserOutput = Parse(lexerOutput, { 'filename': option.path })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    return AST\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getSourceFromContent(content, option) { ... }')\n\n    let AST = this.getASTFromContent(content, option)\n    let blockNode = new BlockNode(AST, option)\n    let blockSource = await blockNode.getSource()\n\n    let source =  ` function ${EachNode.__forEach.toString()}\n                    function ${AndAttributeNode.__addAndAttribute.toString()}\n                    function ${AttributeNode.__getAttributeName.toString()}\n                    function ${AttributeNode.__getAttributeValue.toString()}\n                    function ${AttributeNode.__addAttribute.toString()}\n                    function ${TagNode.__getNodeName.toString()}\n                    function ${TagNode.__getNodeProperty.toString()}\n                    function ${TagNode.__getChildNode.toString()}\n                    function ${TagNode.__createNode.toString()}\n                    function __getNode(__option = {}) { \n                      // Powered by ${Package.name} v${Package.version}\n                      // FilePath = '${Path.relative('', FilePath)}'\n                      const __node = []\n                      ${blockSource}\n                      return __node\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionSourceFromContent(content, option) { ... }')\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __option = {}) {\n                  // Powered by ${Package.name} v${Package.version}\n                  // FilePath = '${Path.relative('', FilePath)}'\n                  ${local}\n                  ${source} \n                  return __getNode(__option) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(anonymous)' }) {\n    // console.log('Transform.getFunctionFromContent(content, option) { ... }')\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getASTFromPath(path) {\n    // console.log(`Transform.getASTFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let AST = this.getASTFromContent(content, { 'path': path })\n\n    return AST\n\n  }\n\n  static async getSourceFromPath(path) {\n    // console.log(`Transform.getSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n    // console.log('Transform.getFunctionSourceFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n    // console.log(`Transform.getFunctionFromPath('${Path.relative('', path)}') { ... }`)\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async createModuleFromPath(path, option = { 'encoding': 'utf-8', 'flag': 'wx' }) {\n    // console.log(`Transform.createModuleFromPath('${Path.relative('', path)}') { ... }`)\n\n    let source = null\n    source = await this.getFunctionSourceFromPath(path)\n    source =  ` import CreateVirtualNode from 'virtual-dom/h.js'\n                import _ConvertToVirtualNode from 'html-to-vdom'\n                import VirtualNode from 'virtual-dom/vnode/vnode.js'\n                import VirtualText from 'virtual-dom/vnode/vtext.js'\n                const ConvertToVirtualNode = _ConvertToVirtualNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n                ${source}\n                export default function(__local = {}, __option = { 'createNode': CreateVirtualNode, 'convertToNode': ConvertToVirtualNode }) { \n                  // Powered by ${Package.name} v${Package.version}\n                  // FilePath = '${Path.relative('', FilePath)}'\n                  return __getNode(__local, __option) \n                }`\n\n    source = await this.formatSource(source)\n\n    let extension = Path.extname(FilePath)\n    let modulePath = `${path}${extension}`\n\n    await FileSystem.writeFile(modulePath, source, option)\n\n    // return import(URL.pathToFileURL(modulePath))\n    // return import(modulePath)\n\n    // __transformPath does ...\n    //   URL.pathToFileURL if the environment is ESModule\n    //   require.resolve if the environment is CommonJS\n    return import(__transformPath(modulePath))\n\n  }\n\n  static async formatSource(source) {\n\n    let extension = null\n    extension = Path.extname(FilePath)\n    extension = extension.toLowerCase()\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[extension === '.cjs' ? 'commonjs' : 'esmodule']\n    \n    let { code: sourceOut } = await Babel.transformAsync(source, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'consistent',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.js"}