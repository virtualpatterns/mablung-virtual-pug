{"version":3,"sources":["../../source/library/utility.js"],"names":["_ConvertToVirtualNode","CreateVirtualNode","VirtualNode","VirtualText","ConvertToVirtualNode","Utility","convertToNode","parameter","createNode","name","property","childNode","getNodeName","getNodeProperty","getChildNode","map","entry","Object","entries","sort","leftName","rightName","localeCompare","forEach","value","toUpperCase","node","addAndAttribute","object","attributeNode","addAttribute","getAttributeName","getAttributeValue","undefined","currentValue","Array","isArray","join","keys","filter","key","fn","length"],"mappings":"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","sourcesContent":["import _ConvertToVirtualNode from 'html-to-vdom'\nimport CreateVirtualNode from 'virtual-dom/h.js'\nimport VirtualNode from 'virtual-dom/vnode/vnode.js'\nimport VirtualText from 'virtual-dom/vnode/vtext.js'\n\nconst ConvertToVirtualNode = _ConvertToVirtualNode({ 'VNode': VirtualNode, 'VText': VirtualText })\n\nclass Utility {\n\n  /* c8 ignore next 3 */\n  static convertToNode(...parameter) {\n    return ConvertToVirtualNode(...parameter)\n  }\n\n  // TagNode\n  /* c8 ignore next 9 */\n  static createNode(name, property, childNode) {\n\n    name = this.getNodeName(name)\n    property = this.getNodeProperty(property)\n    childNode = this.getChildNode(childNode)\n\n    return CreateVirtualNode(name, { 'attributes': property }, childNode)\n\n  }\n\n  /* c8 ignore next 3 */\n  static getNodeName(name) {\n    return name\n  }\n\n  /* c8 ignore next 17 */\n  static getNodeProperty(property) {\n\n    let map = {} // { 'CLASS': 'className', 'FOR': 'htmlFor', 'HTTP-EQUIV': 'httpEquiv' }\n    let entry = Object.entries(property)\n\n    entry\n      .sort(([ leftName ], [ rightName ]) => leftName.localeCompare(rightName))\n      .forEach(([ name, value ]) => {\n\n        if (name.toUpperCase() in map) {\n          delete property[name]\n          property[map[name.toUpperCase()] || name] = value\n        }\n\n      })\n\n    return property\n\n  }\n\n  /* c8 ignore next 3 */\n  static getChildNode(node) {\n    return node\n  }\n  // AndAttributeNode\n  /* c8 ignore next 3 */\n  static addAndAttribute(object, attributeNode) {\n    Object.entries(object).forEach(([ name, value ]) => this.addAttribute(name, value, attributeNode))\n  }\n\n  // AttributeNode\n  /* c8 ignore next 15 */\n  static addAttribute(name, value, attributeNode) {\n\n    if (typeof value === 'boolean' &&\n        value === false) {\n      // do nothing\n    } else {\n\n      name = this.getAttributeName(name)\n      value = this.getAttributeValue(name, value, attributeNode[name])\n\n      if (value !== undefined) {\n        attributeNode[name] = value\n      }\n\n    }\n\n  }\n\n  /* c8 ignore next 9 */\n  static getAttributeName(name) {\n    return name\n  }\n\n  /* c8 ignore next 28 */\n  static getAttributeValue(name, value, currentValue) {\n\n    if (typeof value === 'boolean') {\n      value = value ? name : false\n    } else if (typeof value === 'string') {\n      value = currentValue ? `${currentValue} ${value}` : value\n    } else if (Array.isArray(value)) {\n      value = currentValue ? `${currentValue} ${value.join(' ')}` : value.join(' ')\n    } else {\n\n      switch (name.toUpperCase()) {\n        case 'CLASS':\n          value = Object.keys(value)\n            .filter((key) => value[key])\n            .join(' ')\n          break\n        case 'STYLE':\n          value = Object.keys(value)\n            .map((key) => `${key}:${value[key]};`)\n            .join('')\n          break\n      }\n\n    }\n\n    return value === '' ? undefined : value\n\n  }\n\n  // EachNode\n  /* c8 ignore next 17 */\n  static forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n\n}\n\nexport default Utility"],"file":"utility.js"}