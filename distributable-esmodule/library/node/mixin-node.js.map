{"version":3,"sources":["../../../source/library/node/mixin-node.js"],"names":["Identifier","BlockAttributeNode","BlockNode","Node","MixinNode","constructor","node","option","getSource","source","_node","call","blockAttributeNode","_option","blockAttributeSource","isEmpty","undefined","blockNode","blockSource","block","name","args"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;;AAEA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,SAAN,SAAwBD,IAAxB,CAA6B;;AAE3BE,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;;AAEhB,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAI,KAAKC,KAAL,CAAWC,IAAf,EAAqB;;AAEnB,UAAIC,kBAAkB,GAAG,IAAIX,kBAAJ,CAAuB,KAAKS,KAA5B,EAAmC,KAAKG,OAAxC,CAAzB;;AAEA,UAAIC,oBAAoB,GAAG,IAA3B;AACAA,MAAAA,oBAAoB,GAAG,MAAMF,kBAAkB,CAACJ,SAAnB,EAA7B;AACAM,MAAAA,oBAAoB,GAAGF,kBAAkB,CAACG,OAAnB;AACrBC,MAAAA,SADqB;AAEpB;;aAEIF,oBAAqB;;cAJ5B;;AAQA,UAAIG,SAAS,GAAG,IAAhB;AACA,UAAIC,WAAW,GAAG,IAAlB;;AAEA,UAAI,KAAKR,KAAL,CAAWS,KAAf,EAAsB;AACpBF,QAAAA,SAAS,GAAG,IAAIf,SAAJ,CAAc,KAAKQ,KAAL,CAAWS,KAAzB,EAAgC,KAAKN,OAArC,CAAZ;AACAK,QAAAA,WAAW,GAAG,MAAMD,SAAS,CAACT,SAAV,EAApB;AACAU,QAAAA,WAAW,GAAGD,SAAS,CAACF,OAAV;AACZ,YADY;AAEX;;cAEGG,WAAY;;eAJlB;AAOD,OAVD,MAUO;AACLA,QAAAA,WAAW,GAAGF,SAAd;AACD;;AAEDP,MAAAA,MAAM,GAAK;;+BAEcT,UAAU,CAAC,KAAKU,KAAL,CAAWU,IAAZ,CAAkB;wBACnCN,oBAAqB;wBACrBI,WAAY;wBACZ,KAAKR,KAAL,CAAWW,IAAX,GAAmB,KAAI,KAAKX,KAAL,CAAWW,IAAK,EAAvC,GAA2C,EAAG;;oBALhE;;AASD,KAxCD,MAwCO;;AAEL,UAAIJ,SAAS,GAAG,IAAIf,SAAJ,CAAc,KAAKQ,KAAL,CAAWS,KAAzB,EAAgC,KAAKN,OAArC,CAAhB;AACA,UAAIK,WAAW,GAAG,MAAMD,SAAS,CAACT,SAAV,EAAxB;;AAEAC,MAAAA,MAAM,GAAK,sBAAqBT,UAAU,CAAC,KAAKU,KAAL,CAAWU,IAAZ,CAAkB,oBAAmB,KAAKV,KAAL,CAAWW,IAAX,GAAmB,KAAI,KAAKX,KAAL,CAAWW,IAAK,EAAvC,GAA2C,EAAG;;;sBAG7GH,WAAY;;oBAH5B;;AAOD;;AAED,WAAOT,MAAP;;AAED,GAlE0B;;;;AAsE7B,eAAeL,SAAf","sourcesContent":["import Identifier from 'to-js-identifier'\n\nimport BlockAttributeNode from './block-attribute-node.js'\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nclass MixinNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    let source = null\n\n    if (this._node.call) {\n\n      let blockAttributeNode = new BlockAttributeNode(this._node, this._option)\n\n      let blockAttributeSource = null\n      blockAttributeSource = await blockAttributeNode.getSource()\n      blockAttributeSource = blockAttributeNode.isEmpty ? \n        undefined : \n        `(() => { \n           const __attributeNode = {}\n           ${blockAttributeSource}\n           return __attributeNode\n         })()`\n\n      let blockNode = null\n      let blockSource = null\n\n      if (this._node.block) {\n        blockNode = new BlockNode(this._node.block, this._option)\n        blockSource = await blockNode.getSource()\n        blockSource = blockNode.isEmpty ? \n          '[]' : \n          `(() => { \n            const __node = []\n            ${blockSource}\n            return __node\n          })()`\n      } else {\n        blockSource = undefined\n      }\n\n      source =  ` __node.push(\n                    ...\n                    __mixin__${Identifier(this._node.name)}(\n                      ${blockAttributeSource},\n                      ${blockSource}\n                      ${this._node.args ? `, ${this._node.args}` : ''}\n                    )\n                  )`\n\n    } else {\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n      let blockSource = await blockNode.getSource()\n  \n      source =  ` function __mixin__${Identifier(this._node.name)}(attribute, block${this._node.args ? `, ${this._node.args}` : ''}) {\n                    const attributes = attribute\n                    const __node = []\n                    ${blockSource}\n                    return __node\n                  }`\n  \n    }\n\n    return source\n\n  }\n\n}\n\nexport default MixinNode"],"file":"mixin-node.js"}