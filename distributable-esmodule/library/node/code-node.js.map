{"version":3,"sources":["../../../source/library/node/code-node.js"],"names":["BlockNode","Node","UnsupportedCodeTransformError","CodeNode","constructor","node","option","getSource","_node","buffer","mustEscape","val","block","blockNode","_option","blockSource","isEmpty"],"mappings":";AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,SAASC,6BAAT,QAA8C,8CAA9C;;AAEA,MAAMC,QAAN,SAAuBF,IAAvB,CAA4B;;AAE1BG,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,QAAI,KAAKC,KAAL,CAAWC,MAAf,EAAuB;;AAErB;;AAEA,UAAI,KAAKD,KAAL,CAAWE,UAAf,EAA2B;AACzB,cAAM,IAAIR,6BAAJ,CAAkC,KAAKM,KAAvC,CAAN;AACD,OAFD,MAEO;;AAEL,eAAS;AACjB,kCAAkC,KAAKA,KAAL,CAAWG,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA,oBAPQ;;AASD;;AAEF,KAnBD,MAmBO;;AAEL,UAAI,KAAKH,KAAL,CAAWI,KAAf,EAAsB;;AAEpB,YAAIC,SAAS,GAAG,IAAIb,SAAJ,CAAc,KAAKQ,KAAL,CAAWI,KAAzB,EAAgC,KAAKE,OAArC,CAAhB;AACA,YAAIC,WAAW,GAAGF,SAAS,CAACG,OAAV,GAAoB,EAApB,GAAyB,MAAMH,SAAS,CAACN,SAAV,EAAjD;;AAEA,eAAS,IAAG,KAAKC,KAAL,CAAWG,GAAI;AACnC,sBAAsBI,WAAY;AAClC,oBAFQ;;AAID,OATD,MASO;AACL,eAAO,KAAKP,KAAL,CAAWG,GAAlB;AACD;;AAEF;;AAEF,GAhEyB;;;;AAoE5B,eAAeR,QAAf","sourcesContent":["\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nimport { UnsupportedCodeTransformError } from '../error/unsupported-code-transform-error.js'\n\nclass CodeNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    // if (node.buffer) {\n    //   if (node.mustEscape) {\n    //     source.push(`_nodes = _nodes.concat(${node.val})`)\n    //   } else {\n    //     throw new UnSupportedError('Buffered unescaped source is unsupported.')\n    //   }\n    // } else {\n  \n    //   source.push(`${node.val}`)\n  \n    //   if (node.block) {\n    //     source.push('{')\n    //     this.processBlock(node.block, source)\n    //     source.push('}')\n    //   } else {\n    //     source.push('')\n    //   }\n  \n    // }\n  \n    if (this._node.buffer) {\n\n      // return `__node.push(${this._node.val})`\n\n      if (this._node.mustEscape) {\n        throw new UnsupportedCodeTransformError(this._node)\n      } else {\n\n        return  ` {\n                    let value = ${this._node.val}\n                    if (typeof value === 'string') {\n                      __node.push(...[__utility.convertToNode(value)].flat())\n                    } else {\n                      __node.push(value)\n                    }\n                  }`\n\n      }\n\n    } else {\n\n      if (this._node.block) {\n\n        let blockNode = new BlockNode(this._node.block, this._option)\n        let blockSource = blockNode.isEmpty ? '' : await blockNode.getSource()\n  \n        return  ` ${this._node.val} { \n                    ${blockSource}\n                  }`\n\n      } else {\n        return this._node.val\n      }\n\n    }\n\n  }\n\n}\n\nexport default CodeNode"],"file":"code-node.js"}