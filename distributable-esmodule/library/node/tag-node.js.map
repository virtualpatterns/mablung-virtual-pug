{"version":3,"sources":["../../../source/library/node/tag-node.js"],"names":["BlockAttributeNode","BlockNode","Node","UnsupportedTagTransformError","TagNode","constructor","node","option","getSource","_node","selfClosing","blockAttributeNode","_option","blockAttributeSource","isEmpty","blockNode","block","blockSource","name"],"mappings":";AACA,OAAOA,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,SAASC,4BAAT,QAA6C,6CAA7C;;AAEA,MAAMC,OAAN,SAAsBF,IAAtB,CAA2B;;AAEzBG,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;;AAEhB,QAAI,KAAKC,KAAL,CAAWC,WAAf,EAA4B;AAC1B,YAAM,IAAIP,4BAAJ,CAAiC,KAAKM,KAAtC,CAAN;AACD,KAFD,MAEO;;AAEL,UAAIE,kBAAkB,GAAG,IAAIX,kBAAJ,CAAuB,KAAKS,KAA5B,EAAmC,KAAKG,OAAxC,CAAzB;;AAEA,UAAIC,oBAAoB,GAAG,IAA3B;AACAA,MAAAA,oBAAoB,GAAG,MAAMF,kBAAkB,CAACH,SAAnB,EAA7B;AACAK,MAAAA,oBAAoB,GAAGF,kBAAkB,CAACG,OAAnB;AACrB,UADqB;AAEpB;;aAEID,oBAAqB;;cAJ5B;;AAQA,UAAIE,SAAS,GAAG,IAAId,SAAJ,CAAc,KAAKQ,KAAL,CAAWO,KAAzB,EAAgC,KAAKJ,OAArC,CAAhB;;AAEA,UAAIK,WAAW,GAAG,IAAlB;AACAA,MAAAA,WAAW,GAAG,MAAMF,SAAS,CAACP,SAAV,EAApB;AACAS,MAAAA,WAAW,GAAGF,SAAS,CAACD,OAAV;AACZ,UADY;AAEX;;aAEIG,WAAY;;cAJnB;;AAQA,aAAS,oCAAmC,KAAKR,KAAL,CAAWS,IAAK,MAAKL,oBAAqB,KAAII,WAAY,IAAtG;;AAED;;AAEF,GAxCwB;;;;AA4C3B,eAAeb,OAAf","sourcesContent":["\nimport BlockAttributeNode from './block-attribute-node.js'\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nimport { UnsupportedTagTransformError } from '../error/unsupported-tag-transform-error.js'\n\nclass TagNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    if (this._node.selfClosing) {\n      throw new UnsupportedTagTransformError(this._node)\n    } else {\n\n      let blockAttributeNode = new BlockAttributeNode(this._node, this._option)\n\n      let blockAttributeSource = null\n      blockAttributeSource = await blockAttributeNode.getSource()\n      blockAttributeSource = blockAttributeNode.isEmpty ? \n        '{}' : \n        `(() => { \n           const __attributeNode = {}\n           ${blockAttributeSource}\n           return __attributeNode\n         })()`\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n\n      let blockSource = null\n      blockSource = await blockNode.getSource()\n      blockSource = blockNode.isEmpty ? \n        '[]' : \n        `(() => { \n           const __node = []\n           ${blockSource}\n           return __node\n         })()`\n\n      return  `__node.push(__option.createNode('${this._node.name}', ${blockAttributeSource}, ${blockSource}))`\n\n    }\n\n  }\n\n}\n\nexport default TagNode"],"file":"tag-node.js"}