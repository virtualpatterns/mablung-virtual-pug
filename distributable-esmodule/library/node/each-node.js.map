{"version":3,"sources":["../../../source/library/node/each-node.js"],"names":["BlockNode","Node","EachNode","constructor","node","option","getSource","source","blockNode","_node","block","_option","blockSource","isEmpty","obj","val","key","alternate","alternateNode","alternateSource","__forEach","value","fn","Array","isArray","forEach","length","entry","Object","entries","name"],"mappings":";AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;;AAE1BE,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;;AAEhB,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAIC,SAAS,GAAG,IAAIR,SAAJ,CAAc,KAAKS,KAAL,CAAWC,KAAzB,EAAgC,KAAKC,OAArC,CAAhB;AACA,QAAIC,WAAW,GAAGJ,SAAS,CAACK,OAAV,GAAoB,EAApB,GAAyB,MAAML,SAAS,CAACF,SAAV,EAAjD;;AAEAC,IAAAA,MAAM,GAAK,sBAAqB,KAAKE,KAAL,CAAWK,GAAI,MAAK,KAAKL,KAAL,CAAWM,GAAI,GAAE,KAAKN,KAAL,CAAWO,GAAX,GAAkB,KAAI,KAAKP,KAAL,CAAWO,GAAI,EAArC,GAAyC,EAAG;AACrH,oBAAoBJ,WAAY;AAChC,mBAFI;;AAIA,QAAI,KAAKH,KAAL,CAAWQ,SAAf,EAA0B;;AAExB,UAAIC,aAAa,GAAG,IAAIlB,SAAJ,CAAc,KAAKS,KAAL,CAAWQ,SAAzB,EAAoC,KAAKN,OAAzC,CAApB;AACA,UAAIQ,eAAe,GAAGD,aAAa,CAACL,OAAd,GAAwB,EAAxB,GAA6B,MAAMK,aAAa,CAACZ,SAAd,EAAzD;;AAEAC,MAAAA,MAAM,GAAK,QAAOA,MAAO;AAC/B,sBAAsBY,eAAgB;AACtC,oBAFM;;AAID;;AAED,WAAOZ,MAAP;;AAED;;AAED;AACA,SAAOa,SAAP,CAAiBC,KAAjB,EAAwBC,EAAxB,EAA4B;;AAE1B,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;;AAExBA,MAAAA,KAAK,CAACI,OAAN,CAAcH,EAAd;AACA,aAAOD,KAAK,CAACK,MAAb;;AAED,KALD,MAKO;;AAEL,UAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeR,KAAf,CAAZ;;AAEAM,MAAAA,KAAK,CAACF,OAAN,CAAc,CAAC,CAAEK,IAAF,EAAQT,KAAR,CAAD,KAAqBC,EAAE,CAACD,KAAD,EAAQS,IAAR,CAArC;AACA,aAAOH,KAAK,CAACD,MAAb;;AAED;;AAEF,GAjDyB;;;;AAqD5B,eAAexB,QAAf","sourcesContent":["\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nclass EachNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    let source = null\n\n    let blockNode = new BlockNode(this._node.block, this._option)\n    let blockSource = blockNode.isEmpty ? '' : await blockNode.getSource()\n    \n    source =  ` __utility.forEach(${this._node.obj}, (${this._node.val}${this._node.key ? `, ${this._node.key}` : ''}) => { \n                  ${blockSource}\n                })`\n\n    if (this._node.alternate) {\n\n      let alternateNode = new BlockNode(this._node.alternate, this._option)\n      let alternateSource = alternateNode.isEmpty ? '' : await alternateNode.getSource()\n  \n      source =  ` if (${source} <= 0) {\n                    ${alternateSource}\n                  }`\n\n    }\n\n    return source\n\n  }\n\n  /* c8 ignore next 17 */\n  static __forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n}\n\nexport default EachNode"],"file":"each-node.js"}