{"version":3,"sources":["../../source/library/node.js"],"names":["DefaultChangeCase","ModuleChangeCase","Path","FilePath","_URL","fileURLToPath","import","meta","url","paramCase","ParameterCase","Node","constructor","node","option","_node","_option","getSource","createNode","extension","extname","toLowerCase","nodeClass","type","default"],"mappings":"uBAAA,OAAOA,iBAAP,EAA0B,KAAKC,gBAA/B,MAAqD,aAArD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,QAAQ,GAHdC,IAAI,CAACC,aAAL,CAAmBC,MAAM,CAACC,IAAP,CAAYC,GAA/B,CAGA;AACA,MAAM,EAAEC,SAAS,EAAEC,aAAb,KAA+BV,iBAAiB,IAAIC,gBAA1D;;AAEA,MAAMU,IAAN,CAAW;;AAETC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,SAAKC,KAAL,GAAaF,IAAb;AACA,SAAKG,OAAL,GAAeF,MAAf;AACD;;AAED,QAAMG,SAAN,GAAkB,CAAE;;AAEpB,eAAaC,UAAb,CAAwBL,IAAxB,EAA8BC,MAA9B,EAAsC;;AAEpC,QAAIK,SAAS,GAAG,IAAhB;AACAA,IAAAA,SAAS,GAAGjB,IAAI,CAACkB,OAAL,CAAajB,QAAb,CAAZ;AACAgB,IAAAA,SAAS,GAAGA,SAAS,CAACE,WAAV,EAAZ;;AAEA,QAAIC,SAAS,GAAG,IAAhB;AACAA,IAAAA,SAAS,GAAG,MAAM,OAAQ,UAASZ,aAAa,CAACG,IAAI,CAACU,IAAN,CAAY,QAAOJ,SAAU,EAA3D,CAAlB;AACAG,IAAAA,SAAS,GAAGA,SAAS,CAACE,OAAV,IAAqBF,SAAjC;;AAEA,WAAO,IAAIA,SAAJ,CAAcT,IAAd,EAAoBC,MAApB,CAAP;;AAED;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AArCS;;;AAyCX,eAAeH,IAAf","sourcesContent":["import DefaultChangeCase, * as ModuleChangeCase from 'change-case'\nimport Path from 'path'\n\nconst FilePath = __filePath\nconst { paramCase: ParameterCase } = DefaultChangeCase || ModuleChangeCase\n\nclass Node {\n\n  constructor(node, option) {\n    this._node = node\n    this._option = option\n  }\n\n  async getSource() {}\n\n  static async createNode(node, option) {\n\n    let extension = null\n    extension = Path.extname(FilePath)\n    extension = extension.toLowerCase()\n\n    let nodeClass = null\n    nodeClass = await import(`./node/${ParameterCase(node.type)}-node${extension}`)\n    nodeClass = nodeClass.default || nodeClass\n\n    return new nodeClass(node, option)\n\n  }\n\n  // static __escape(value) {\n\n  //   if (typeof value === 'string') {\n      \n  //     value = value.replace(/\"/gi, '&quot;')\n  //     value = value.replace(/'/gi, '&#39;')\n  //     value = value.replace(/&/gi, '&amp;')\n  //     value = value.replace(/</gi, '&lt;')\n  //     value = value.replace(/>/gi, '&gt;')\n  \n  //   }\n\n  //   return value\n\n  // }\n\n}\n\nexport default Node"],"file":"node.js"}